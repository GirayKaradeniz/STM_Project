
GameConsole.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ac  080066ac  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b4  080066b4  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  080066bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000027c  08006938  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08006938  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe64  00000000  00000000  000202ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d6  00000000  00000000  00030153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00032730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0f  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178a2  00000000  00000000  000342bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012250  00000000  00000000  0004bb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092577  00000000  00000000  0005ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c7c  00000000  00000000  000f0328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f4fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000027c 	.word	0x2000027c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005eec 	.word	0x08005eec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000280 	.word	0x20000280
 80001dc:	08005eec 	.word	0x08005eec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b970 	b.w	80008f0 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9e08      	ldr	r6, [sp, #32]
 800062e:	460d      	mov	r5, r1
 8000630:	4604      	mov	r4, r0
 8000632:	460f      	mov	r7, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4694      	mov	ip, r2
 800063c:	d965      	bls.n	800070a <__udivmoddi4+0xe2>
 800063e:	fab2 f382 	clz	r3, r2
 8000642:	b143      	cbz	r3, 8000656 <__udivmoddi4+0x2e>
 8000644:	fa02 fc03 	lsl.w	ip, r2, r3
 8000648:	f1c3 0220 	rsb	r2, r3, #32
 800064c:	409f      	lsls	r7, r3
 800064e:	fa20 f202 	lsr.w	r2, r0, r2
 8000652:	4317      	orrs	r7, r2
 8000654:	409c      	lsls	r4, r3
 8000656:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800065a:	fa1f f58c 	uxth.w	r5, ip
 800065e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000662:	0c22      	lsrs	r2, r4, #16
 8000664:	fb0e 7711 	mls	r7, lr, r1, r7
 8000668:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800066c:	fb01 f005 	mul.w	r0, r1, r5
 8000670:	4290      	cmp	r0, r2
 8000672:	d90a      	bls.n	800068a <__udivmoddi4+0x62>
 8000674:	eb1c 0202 	adds.w	r2, ip, r2
 8000678:	f101 37ff 	add.w	r7, r1, #4294967295
 800067c:	f080 811c 	bcs.w	80008b8 <__udivmoddi4+0x290>
 8000680:	4290      	cmp	r0, r2
 8000682:	f240 8119 	bls.w	80008b8 <__udivmoddi4+0x290>
 8000686:	3902      	subs	r1, #2
 8000688:	4462      	add	r2, ip
 800068a:	1a12      	subs	r2, r2, r0
 800068c:	b2a4      	uxth	r4, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800069a:	fb00 f505 	mul.w	r5, r0, r5
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d90a      	bls.n	80006b8 <__udivmoddi4+0x90>
 80006a2:	eb1c 0404 	adds.w	r4, ip, r4
 80006a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006aa:	f080 8107 	bcs.w	80008bc <__udivmoddi4+0x294>
 80006ae:	42a5      	cmp	r5, r4
 80006b0:	f240 8104 	bls.w	80008bc <__udivmoddi4+0x294>
 80006b4:	4464      	add	r4, ip
 80006b6:	3802      	subs	r0, #2
 80006b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006bc:	1b64      	subs	r4, r4, r5
 80006be:	2100      	movs	r1, #0
 80006c0:	b11e      	cbz	r6, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40dc      	lsrs	r4, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	e9c6 4300 	strd	r4, r3, [r6]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d908      	bls.n	80006e4 <__udivmoddi4+0xbc>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	f000 80ed 	beq.w	80008b2 <__udivmoddi4+0x28a>
 80006d8:	2100      	movs	r1, #0
 80006da:	e9c6 0500 	strd	r0, r5, [r6]
 80006de:	4608      	mov	r0, r1
 80006e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e4:	fab3 f183 	clz	r1, r3
 80006e8:	2900      	cmp	r1, #0
 80006ea:	d149      	bne.n	8000780 <__udivmoddi4+0x158>
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	d302      	bcc.n	80006f6 <__udivmoddi4+0xce>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	f200 80f8 	bhi.w	80008e6 <__udivmoddi4+0x2be>
 80006f6:	1a84      	subs	r4, r0, r2
 80006f8:	eb65 0203 	sbc.w	r2, r5, r3
 80006fc:	2001      	movs	r0, #1
 80006fe:	4617      	mov	r7, r2
 8000700:	2e00      	cmp	r6, #0
 8000702:	d0e2      	beq.n	80006ca <__udivmoddi4+0xa2>
 8000704:	e9c6 4700 	strd	r4, r7, [r6]
 8000708:	e7df      	b.n	80006ca <__udivmoddi4+0xa2>
 800070a:	b902      	cbnz	r2, 800070e <__udivmoddi4+0xe6>
 800070c:	deff      	udf	#255	; 0xff
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8090 	bne.w	8000838 <__udivmoddi4+0x210>
 8000718:	1a8a      	subs	r2, r1, r2
 800071a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071e:	fa1f fe8c 	uxth.w	lr, ip
 8000722:	2101      	movs	r1, #1
 8000724:	fbb2 f5f7 	udiv	r5, r2, r7
 8000728:	fb07 2015 	mls	r0, r7, r5, r2
 800072c:	0c22      	lsrs	r2, r4, #16
 800072e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000732:	fb0e f005 	mul.w	r0, lr, r5
 8000736:	4290      	cmp	r0, r2
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0x124>
 800073a:	eb1c 0202 	adds.w	r2, ip, r2
 800073e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x122>
 8000744:	4290      	cmp	r0, r2
 8000746:	f200 80cb 	bhi.w	80008e0 <__udivmoddi4+0x2b8>
 800074a:	4645      	mov	r5, r8
 800074c:	1a12      	subs	r2, r2, r0
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb2 f0f7 	udiv	r0, r2, r7
 8000754:	fb07 2210 	mls	r2, r7, r0, r2
 8000758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800075c:	fb0e fe00 	mul.w	lr, lr, r0
 8000760:	45a6      	cmp	lr, r4
 8000762:	d908      	bls.n	8000776 <__udivmoddi4+0x14e>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 32ff 	add.w	r2, r0, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x14c>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f200 80bb 	bhi.w	80008ea <__udivmoddi4+0x2c2>
 8000774:	4610      	mov	r0, r2
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800077e:	e79f      	b.n	80006c0 <__udivmoddi4+0x98>
 8000780:	f1c1 0720 	rsb	r7, r1, #32
 8000784:	408b      	lsls	r3, r1
 8000786:	fa22 fc07 	lsr.w	ip, r2, r7
 800078a:	ea4c 0c03 	orr.w	ip, ip, r3
 800078e:	fa05 f401 	lsl.w	r4, r5, r1
 8000792:	fa20 f307 	lsr.w	r3, r0, r7
 8000796:	40fd      	lsrs	r5, r7
 8000798:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079c:	4323      	orrs	r3, r4
 800079e:	fbb5 f8f9 	udiv	r8, r5, r9
 80007a2:	fa1f fe8c 	uxth.w	lr, ip
 80007a6:	fb09 5518 	mls	r5, r9, r8, r5
 80007aa:	0c1c      	lsrs	r4, r3, #16
 80007ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007b0:	fb08 f50e 	mul.w	r5, r8, lr
 80007b4:	42a5      	cmp	r5, r4
 80007b6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ba:	fa00 f001 	lsl.w	r0, r0, r1
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b0>
 80007c0:	eb1c 0404 	adds.w	r4, ip, r4
 80007c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c8:	f080 8088 	bcs.w	80008dc <__udivmoddi4+0x2b4>
 80007cc:	42a5      	cmp	r5, r4
 80007ce:	f240 8085 	bls.w	80008dc <__udivmoddi4+0x2b4>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4464      	add	r4, ip
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	b29d      	uxth	r5, r3
 80007dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e0:	fb09 4413 	mls	r4, r9, r3, r4
 80007e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80007ec:	45a6      	cmp	lr, r4
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1da>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80007f8:	d26c      	bcs.n	80008d4 <__udivmoddi4+0x2ac>
 80007fa:	45a6      	cmp	lr, r4
 80007fc:	d96a      	bls.n	80008d4 <__udivmoddi4+0x2ac>
 80007fe:	3b02      	subs	r3, #2
 8000800:	4464      	add	r4, ip
 8000802:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000806:	fba3 9502 	umull	r9, r5, r3, r2
 800080a:	eba4 040e 	sub.w	r4, r4, lr
 800080e:	42ac      	cmp	r4, r5
 8000810:	46c8      	mov	r8, r9
 8000812:	46ae      	mov	lr, r5
 8000814:	d356      	bcc.n	80008c4 <__udivmoddi4+0x29c>
 8000816:	d053      	beq.n	80008c0 <__udivmoddi4+0x298>
 8000818:	b156      	cbz	r6, 8000830 <__udivmoddi4+0x208>
 800081a:	ebb0 0208 	subs.w	r2, r0, r8
 800081e:	eb64 040e 	sbc.w	r4, r4, lr
 8000822:	fa04 f707 	lsl.w	r7, r4, r7
 8000826:	40ca      	lsrs	r2, r1
 8000828:	40cc      	lsrs	r4, r1
 800082a:	4317      	orrs	r7, r2
 800082c:	e9c6 7400 	strd	r7, r4, [r6]
 8000830:	4618      	mov	r0, r3
 8000832:	2100      	movs	r1, #0
 8000834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000838:	f1c3 0120 	rsb	r1, r3, #32
 800083c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000840:	fa20 f201 	lsr.w	r2, r0, r1
 8000844:	fa25 f101 	lsr.w	r1, r5, r1
 8000848:	409d      	lsls	r5, r3
 800084a:	432a      	orrs	r2, r5
 800084c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fbb1 f0f7 	udiv	r0, r1, r7
 8000858:	fb07 1510 	mls	r5, r7, r0, r1
 800085c:	0c11      	lsrs	r1, r2, #16
 800085e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000862:	fb00 f50e 	mul.w	r5, r0, lr
 8000866:	428d      	cmp	r5, r1
 8000868:	fa04 f403 	lsl.w	r4, r4, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x258>
 800086e:	eb1c 0101 	adds.w	r1, ip, r1
 8000872:	f100 38ff 	add.w	r8, r0, #4294967295
 8000876:	d22f      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 8000878:	428d      	cmp	r5, r1
 800087a:	d92d      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 800087c:	3802      	subs	r0, #2
 800087e:	4461      	add	r1, ip
 8000880:	1b49      	subs	r1, r1, r5
 8000882:	b292      	uxth	r2, r2
 8000884:	fbb1 f5f7 	udiv	r5, r1, r7
 8000888:	fb07 1115 	mls	r1, r7, r5, r1
 800088c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000890:	fb05 f10e 	mul.w	r1, r5, lr
 8000894:	4291      	cmp	r1, r2
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x282>
 8000898:	eb1c 0202 	adds.w	r2, ip, r2
 800089c:	f105 38ff 	add.w	r8, r5, #4294967295
 80008a0:	d216      	bcs.n	80008d0 <__udivmoddi4+0x2a8>
 80008a2:	4291      	cmp	r1, r2
 80008a4:	d914      	bls.n	80008d0 <__udivmoddi4+0x2a8>
 80008a6:	3d02      	subs	r5, #2
 80008a8:	4462      	add	r2, ip
 80008aa:	1a52      	subs	r2, r2, r1
 80008ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008b0:	e738      	b.n	8000724 <__udivmoddi4+0xfc>
 80008b2:	4631      	mov	r1, r6
 80008b4:	4630      	mov	r0, r6
 80008b6:	e708      	b.n	80006ca <__udivmoddi4+0xa2>
 80008b8:	4639      	mov	r1, r7
 80008ba:	e6e6      	b.n	800068a <__udivmoddi4+0x62>
 80008bc:	4610      	mov	r0, r2
 80008be:	e6fb      	b.n	80006b8 <__udivmoddi4+0x90>
 80008c0:	4548      	cmp	r0, r9
 80008c2:	d2a9      	bcs.n	8000818 <__udivmoddi4+0x1f0>
 80008c4:	ebb9 0802 	subs.w	r8, r9, r2
 80008c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008cc:	3b01      	subs	r3, #1
 80008ce:	e7a3      	b.n	8000818 <__udivmoddi4+0x1f0>
 80008d0:	4645      	mov	r5, r8
 80008d2:	e7ea      	b.n	80008aa <__udivmoddi4+0x282>
 80008d4:	462b      	mov	r3, r5
 80008d6:	e794      	b.n	8000802 <__udivmoddi4+0x1da>
 80008d8:	4640      	mov	r0, r8
 80008da:	e7d1      	b.n	8000880 <__udivmoddi4+0x258>
 80008dc:	46d0      	mov	r8, sl
 80008de:	e77b      	b.n	80007d8 <__udivmoddi4+0x1b0>
 80008e0:	3d02      	subs	r5, #2
 80008e2:	4462      	add	r2, ip
 80008e4:	e732      	b.n	800074c <__udivmoddi4+0x124>
 80008e6:	4608      	mov	r0, r1
 80008e8:	e70a      	b.n	8000700 <__udivmoddi4+0xd8>
 80008ea:	4464      	add	r4, ip
 80008ec:	3802      	subs	r0, #2
 80008ee:	e742      	b.n	8000776 <__udivmoddi4+0x14e>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <buzzerSetNewFrequency>:
 *
 * 	args:
 * 	newFreq - new frequency in Hz.
 */
void buzzerSetNewFrequency(uint32_t newFreq)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint64_t tempFreq = newFreq;
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	2000      	movs	r0, #0
 8000900:	460a      	mov	r2, r1
 8000902:	4603      	mov	r3, r0
 8000904:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (newFreq == 0)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d104      	bne.n	8000918 <buzzerSetNewFrequency+0x24>
		tempFreq = 999999;
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <buzzerSetNewFrequency+0x50>)
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint64_t tempNewValue = (uint64_t)CPU_FREQ / PRESCALER / tempFreq;
 8000918:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <buzzerSetNewFrequency+0x54>)
 800091e:	f04f 0100 	mov.w	r1, #0
 8000922:	f7ff fe69 	bl	80005f8 <__aeabi_uldivmod>
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// setting new value
	TIM1->ARR = (uint32_t)tempNewValue;
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <buzzerSetNewFrequency+0x58>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CCR3 = (uint32_t)tempNewValue / 2;
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <buzzerSetNewFrequency+0x58>)
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	000f423f 	.word	0x000f423f
 8000948:	000f4240 	.word	0x000f4240
 800094c:	40010000 	.word	0x40010000

08000950 <musicHandler>:

void musicHandler()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

	if (changeNote)
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <musicHandler+0x100>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d02d      	beq.n	80009b8 <musicHandler+0x68>
	{

		changeNote = 0;
 800095c:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <musicHandler+0x100>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]

		currentFreq = melody[partCounter][noteCounter];
 8000962:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <musicHandler+0x104>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <musicHandler+0x108>)
 800096a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800096e:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <musicHandler+0x10c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a39      	ldr	r2, [pc, #228]	; (8000a60 <musicHandler+0x110>)
 800097a:	6013      	str	r3, [r2, #0]
		currentDuration = noteDurations[partCounter][noteCounter];
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <musicHandler+0x104>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <musicHandler+0x114>)
 8000984:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000988:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <musicHandler+0x10c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a35      	ldr	r2, [pc, #212]	; (8000a68 <musicHandler+0x118>)
 8000994:	6013      	str	r3, [r2, #0]
		currentSlowFactor = melodySlowfactor[partCounter];
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <musicHandler+0x104>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <musicHandler+0x11c>)
 800099e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <musicHandler+0x120>)
 80009a4:	801a      	strh	r2, [r3, #0]
		changedDurationTick = 1;
 80009a6:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <musicHandler+0x124>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
		buzzerSetNewFrequency(currentFreq);
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <musicHandler+0x110>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff9f 	bl	80008f4 <buzzerSetNewFrequency>
					partCounter=0;
				}
			}
		}
	}
}
 80009b6:	e049      	b.n	8000a4c <musicHandler+0xfc>
		if (changedDurationTick == 1)
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <musicHandler+0x124>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d115      	bne.n	80009ec <musicHandler+0x9c>
			durationTick = uwTickFreq+ (currentDuration * currentSlowFactor);
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <musicHandler+0x128>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <musicHandler+0x120>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <musicHandler+0x118>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	fb01 f303 	mul.w	r3, r1, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <musicHandler+0x12c>)
 80009d8:	6013      	str	r3, [r2, #0]
			changedDurationTick = 0;
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <musicHandler+0x124>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
			musicTimer = HAL_GetTick();
 80009e0:	f001 fd7c 	bl	80024dc <HAL_GetTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <musicHandler+0x130>)
 80009ea:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - musicTimer > durationTick){
 80009ec:	f001 fd76 	bl	80024dc <HAL_GetTick>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <musicHandler+0x130>)
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	1a9a      	subs	r2, r3, r2
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <musicHandler+0x12c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d925      	bls.n	8000a4c <musicHandler+0xfc>
			changeNote=1;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <musicHandler+0x100>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
			noteCounter++;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <musicHandler+0x10c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <musicHandler+0x10c>)
 8000a10:	701a      	strb	r2, [r3, #0]
			if(noteCounter>=melodySizes[partCounter]){
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <musicHandler+0x10c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <musicHandler+0x104>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <musicHandler+0x134>)
 8000a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d311      	bcc.n	8000a4c <musicHandler+0xfc>
				noteCounter=0;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <musicHandler+0x10c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
				partCounter++;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <musicHandler+0x104>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <musicHandler+0x104>)
 8000a38:	701a      	strb	r2, [r3, #0]
				if(partCounter==melodyCount){
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <musicHandler+0x104>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2302      	movs	r3, #2
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d102      	bne.n	8000a4c <musicHandler+0xfc>
					partCounter=0;
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <musicHandler+0x104>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000010 	.word	0x20000010
 8000a54:	200002ad 	.word	0x200002ad
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	200002ac 	.word	0x200002ac
 8000a60:	2000029c 	.word	0x2000029c
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200002a0 	.word	0x200002a0
 8000a6c:	080063c4 	.word	0x080063c4
 8000a70:	200002aa 	.word	0x200002aa
 8000a74:	200002a8 	.word	0x200002a8
 8000a78:	2000021c 	.word	0x2000021c
 8000a7c:	200002a4 	.word	0x200002a4
 8000a80:	20000298 	.word	0x20000298
 8000a84:	080063c8 	.word	0x080063c8

08000a88 <FrameBuffer_byteOR>:
#include "5x8_font.h"
const char width = 128, height = 64;
const unsigned char *font = font_5x8;
const int buffer_size = 1024;
void FrameBuffer_byteOR(unsigned char *buffer, int n, unsigned char byte)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	4613      	mov	r3, r2
 8000a94:	71fb      	strb	r3, [r7, #7]
    if (n > buffer_size - 1)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	da0b      	bge.n	8000ab8 <FrameBuffer_byteOR+0x30>
        return;
    buffer[n] |= byte;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	7819      	ldrb	r1, [r3, #0]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e000      	b.n	8000aba <FrameBuffer_byteOR+0x32>
        return;
 8000ab8:	bf00      	nop
}
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <FrameBuffer_byteAND>:
void FrameBuffer_byteAND(unsigned char *buffer, int n, unsigned char byte)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	71fb      	strb	r3, [r7, #7]
    if (n > buffer_size - 1)
 8000ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	da0b      	bge.n	8000af4 <FrameBuffer_byteAND+0x30>
        return;
    buffer[n] &= byte;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	400a      	ands	r2, r1
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e000      	b.n	8000af6 <FrameBuffer_byteAND+0x32>
        return;
 8000af4:	bf00      	nop
}
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <FrameBuffer_byteFLIP>:
void FrameBuffer_byteFLIP(unsigned char *buffer, int n, unsigned char byte)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	71fb      	strb	r3, [r7, #7]
    if (n > (buffer_size - 1))
 8000b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	4293      	cmp	r3, r2
 8000b16:	da0b      	bge.n	8000b30 <FrameBuffer_byteFLIP+0x30>
        return;
    buffer[n] ^= byte;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	7819      	ldrb	r1, [r3, #0]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4413      	add	r3, r2
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	404a      	eors	r2, r1
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e000      	b.n	8000b32 <FrameBuffer_byteFLIP+0x32>
        return;
 8000b30:	bf00      	nop
}
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <FrameBuffer_setPixel>:
void FrameBuffer_setPixel(unsigned char *buffer, int16_t x, int16_t y, bool color, Mode mode)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	4608      	mov	r0, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	817b      	strh	r3, [r7, #10]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	813b      	strh	r3, [r7, #8]
 8000b52:	4613      	mov	r3, r2
 8000b54:	71fb      	strb	r3, [r7, #7]
    if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8000b56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db7b      	blt.n	8000c56 <FrameBuffer_setPixel+0x11a>
 8000b5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	4293      	cmp	r3, r2
 8000b66:	da76      	bge.n	8000c56 <FrameBuffer_setPixel+0x11a>
 8000b68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db72      	blt.n	8000c56 <FrameBuffer_setPixel+0x11a>
 8000b70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	4293      	cmp	r3, r2
 8000b78:	da6d      	bge.n	8000c56 <FrameBuffer_setPixel+0x11a>
        return;
    uint16_t byte = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	82fb      	strh	r3, [r7, #22]
    byte = 1 << (y & 7);
 8000b7e:	893b      	ldrh	r3, [r7, #8]
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	2201      	movs	r2, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	82fb      	strh	r3, [r7, #22]

    if ((int)mode == 1)
 8000b8c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d113      	bne.n	8000bbc <FrameBuffer_setPixel+0x80>
    {
        FrameBuffer_byteOR(buffer, x + ((y / 8) * width), byte);
 8000b94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da00      	bge.n	8000ba2 <FrameBuffer_setPixel+0x66>
 8000ba0:	3307      	adds	r3, #7
 8000ba2:	10db      	asrs	r3, r3, #3
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	fb01 f303 	mul.w	r3, r1, r3
 8000bac:	4413      	add	r3, r2
 8000bae:	8afa      	ldrh	r2, [r7, #22]
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff ff67 	bl	8000a88 <FrameBuffer_byteOR>
 8000bba:	e04d      	b.n	8000c58 <FrameBuffer_setPixel+0x11c>
    }
    else if ((int)mode == 0 || color == 0)
 8000bbc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d005      	beq.n	8000bd0 <FrameBuffer_setPixel+0x94>
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f083 0301 	eor.w	r3, r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d015      	beq.n	8000bfc <FrameBuffer_setPixel+0xc0>
    {
        FrameBuffer_byteAND(buffer, x + ((y / 8) * width), ~byte);
 8000bd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000bd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da00      	bge.n	8000bde <FrameBuffer_setPixel+0xa2>
 8000bdc:	3307      	adds	r3, #7
 8000bde:	10db      	asrs	r3, r3, #3
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	fb01 f303 	mul.w	r3, r1, r3
 8000be8:	18d1      	adds	r1, r2, r3
 8000bea:	8afb      	ldrh	r3, [r7, #22]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f7ff ff65 	bl	8000ac4 <FrameBuffer_byteAND>
 8000bfa:	e02d      	b.n	8000c58 <FrameBuffer_setPixel+0x11c>
    }
    else if ((int)mode == -1)
 8000bfc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d113      	bne.n	8000c2e <FrameBuffer_setPixel+0xf2>
    {
        FrameBuffer_byteFLIP(buffer, x + ((y / 8) * width), byte);
 8000c06:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da00      	bge.n	8000c14 <FrameBuffer_setPixel+0xd8>
 8000c12:	3307      	adds	r3, #7
 8000c14:	10db      	asrs	r3, r3, #3
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	8afa      	ldrh	r2, [r7, #22]
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff ff6a 	bl	8000b00 <FrameBuffer_byteFLIP>
 8000c2c:	e014      	b.n	8000c58 <FrameBuffer_setPixel+0x11c>
    }
    else
    {
        FrameBuffer_byteOR(buffer, x + ((y / 8) * width), byte);
 8000c2e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da00      	bge.n	8000c3c <FrameBuffer_setPixel+0x100>
 8000c3a:	3307      	adds	r3, #7
 8000c3c:	10db      	asrs	r3, r3, #3
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	8afa      	ldrh	r2, [r7, #22]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff1a 	bl	8000a88 <FrameBuffer_byteOR>
 8000c54:	e000      	b.n	8000c58 <FrameBuffer_setPixel+0x11c>
        return;
 8000c56:	bf00      	nop
    }
}
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <FrameBuffer_clear>:
void FrameBuffer_clear(unsigned char *buffer)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
    memset(buffer, 0, buffer_size);
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f004 f995 	bl	8004f9e <memset>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <FrameBuffer_addBitmapImage>:
void FrameBuffer_fill(unsigned char *buffer)
{
    memset(buffer, 255, buffer_size);
}
void FrameBuffer_addBitmapImage(unsigned char *buffer, int16_t anchorX, int16_t anchorY, uint16_t image_width, uint16_t image_height, uint8_t *image, Mode mode)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	817b      	strh	r3, [r7, #10]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	813b      	strh	r3, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	80fb      	strh	r3, [r7, #6]
    uint8_t byte = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	747b      	strb	r3, [r7, #17]
    for (uint16_t y = 0; y < image_height; y++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	82fb      	strh	r3, [r7, #22]
 8000c9e:	e044      	b.n	8000d2a <FrameBuffer_addBitmapImage+0xae>
    {
        for (uint16_t x = 0; x < image_width / 8; x++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	82bb      	strh	r3, [r7, #20]
 8000ca4:	e038      	b.n	8000d18 <FrameBuffer_addBitmapImage+0x9c>
        {
            byte = image[y * (image_width / 8) + x];
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	08d2      	lsrs	r2, r2, #3
 8000cac:	b292      	uxth	r2, r2
 8000cae:	fb03 f202 	mul.w	r2, r3, r2
 8000cb2:	8abb      	ldrh	r3, [r7, #20]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	747b      	strb	r3, [r7, #17]

            for (uint16_t z = 0; z < 8; z++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	827b      	strh	r3, [r7, #18]
 8000cc4:	e022      	b.n	8000d0c <FrameBuffer_addBitmapImage+0x90>
            {
                if ((byte >> (7 - z)) & 1)
 8000cc6:	7c7a      	ldrb	r2, [r7, #17]
 8000cc8:	8a7b      	ldrh	r3, [r7, #18]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	fa42 f303 	asr.w	r3, r2, r3
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d015      	beq.n	8000d06 <FrameBuffer_addBitmapImage+0x8a>
                {
                    FrameBuffer_setPixel(buffer, x * 8 + z + anchorX, y + anchorY, 1, mode);
 8000cda:	8abb      	ldrh	r3, [r7, #20]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	8a7b      	ldrh	r3, [r7, #18]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	897b      	ldrh	r3, [r7, #10]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b219      	sxth	r1, r3
 8000cee:	893a      	ldrh	r2, [r7, #8]
 8000cf0:	8afb      	ldrh	r3, [r7, #22]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff ff1b 	bl	8000b3c <FrameBuffer_setPixel>
            for (uint16_t z = 0; z < 8; z++)
 8000d06:	8a7b      	ldrh	r3, [r7, #18]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	827b      	strh	r3, [r7, #18]
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	d9d9      	bls.n	8000cc6 <FrameBuffer_addBitmapImage+0x4a>
        for (uint16_t x = 0; x < image_width / 8; x++)
 8000d12:	8abb      	ldrh	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	82bb      	strh	r3, [r7, #20]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	8aba      	ldrh	r2, [r7, #20]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3c0      	bcc.n	8000ca6 <FrameBuffer_addBitmapImage+0x2a>
    for (uint16_t y = 0; y < image_height; y++)
 8000d24:	8afb      	ldrh	r3, [r7, #22]
 8000d26:	3301      	adds	r3, #1
 8000d28:	82fb      	strh	r3, [r7, #22]
 8000d2a:	8afa      	ldrh	r2, [r7, #22]
 8000d2c:	8c3b      	ldrh	r3, [r7, #32]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3b6      	bcc.n	8000ca0 <FrameBuffer_addBitmapImage+0x24>
                }
            }
        }
    }
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <FrameBuffer_drawRect>:

void FrameBuffer_drawRect(unsigned char *buffer, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool color, Mode mode)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	817b      	strh	r3, [r7, #10]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	813b      	strh	r3, [r7, #8]
 8000d52:	4613      	mov	r3, r2
 8000d54:	80fb      	strh	r3, [r7, #6]
    FrameBuffer_drawFastHLine(buffer, x, y, w, color, mode);
 8000d56:	88f8      	ldrh	r0, [r7, #6]
 8000d58:	893a      	ldrh	r2, [r7, #8]
 8000d5a:	8979      	ldrh	r1, [r7, #10]
 8000d5c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	7f3b      	ldrb	r3, [r7, #28]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4603      	mov	r3, r0
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 f830 	bl	8000dce <FrameBuffer_drawFastHLine>
    FrameBuffer_drawFastHLine(buffer, x, y + h, w, color, mode);
 8000d6e:	893a      	ldrh	r2, [r7, #8]
 8000d70:	8b3b      	ldrh	r3, [r7, #24]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	88f8      	ldrh	r0, [r7, #6]
 8000d78:	8979      	ldrh	r1, [r7, #10]
 8000d7a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	7f3b      	ldrb	r3, [r7, #28]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4603      	mov	r3, r0
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f000 f821 	bl	8000dce <FrameBuffer_drawFastHLine>
    FrameBuffer_drawVerticalLine(buffer, x, y, h, color, mode);
 8000d8c:	8b38      	ldrh	r0, [r7, #24]
 8000d8e:	893a      	ldrh	r2, [r7, #8]
 8000d90:	8979      	ldrh	r1, [r7, #10]
 8000d92:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	7f3b      	ldrb	r3, [r7, #28]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f841 	bl	8000e26 <FrameBuffer_drawVerticalLine>
    FrameBuffer_drawVerticalLine(buffer, x + w, y, h + 1, color, mode);
 8000da4:	897a      	ldrh	r2, [r7, #10]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	4413      	add	r3, r2
 8000daa:	b299      	uxth	r1, r3
 8000dac:	8b3b      	ldrh	r3, [r7, #24]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b298      	uxth	r0, r3
 8000db2:	893a      	ldrh	r2, [r7, #8]
 8000db4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	7f3b      	ldrb	r3, [r7, #28]
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f830 	bl	8000e26 <FrameBuffer_drawVerticalLine>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <FrameBuffer_drawFastHLine>:
            FrameBuffer_setPixel(buffer, x, y, color, mode);
        }
    }
}
void FrameBuffer_drawFastHLine(unsigned char *buffer, uint16_t x, uint16_t y, uint16_t w, bool color, Mode mode)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b088      	sub	sp, #32
 8000dd2:	af02      	add	r7, sp, #8
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	4611      	mov	r1, r2
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	817b      	strh	r3, [r7, #10]
 8000de0:	460b      	mov	r3, r1
 8000de2:	813b      	strh	r3, [r7, #8]
 8000de4:	4613      	mov	r3, r2
 8000de6:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < w; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	82fb      	strh	r3, [r7, #22]
 8000dec:	e012      	b.n	8000e14 <FrameBuffer_drawFastHLine+0x46>
    {
        FrameBuffer_setPixel(buffer, x + i, y, color, mode);
 8000dee:	897a      	ldrh	r2, [r7, #10]
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b219      	sxth	r1, r3
 8000df8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000dfc:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000e00:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	4603      	mov	r3, r0
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff fe97 	bl	8000b3c <FrameBuffer_setPixel>
    for (uint16_t i = 0; i < w; i++)
 8000e0e:	8afb      	ldrh	r3, [r7, #22]
 8000e10:	3301      	adds	r3, #1
 8000e12:	82fb      	strh	r3, [r7, #22]
 8000e14:	8afa      	ldrh	r2, [r7, #22]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3e8      	bcc.n	8000dee <FrameBuffer_drawFastHLine+0x20>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <FrameBuffer_drawVerticalLine>:
void FrameBuffer_drawVerticalLine(unsigned char *buffer, uint16_t x, uint16_t y, uint16_t h, bool color, Mode mode)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b088      	sub	sp, #32
 8000e2a:	af02      	add	r7, sp, #8
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	4611      	mov	r1, r2
 8000e32:	461a      	mov	r2, r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	817b      	strh	r3, [r7, #10]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	813b      	strh	r3, [r7, #8]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = y; i < (h + y); i++)
 8000e40:	893b      	ldrh	r3, [r7, #8]
 8000e42:	82fb      	strh	r3, [r7, #22]
 8000e44:	e00f      	b.n	8000e66 <FrameBuffer_drawVerticalLine+0x40>
    {

        FrameBuffer_setPixel(buffer, x, i, color, mode);
 8000e46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000e4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e4e:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000e52:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fe6e 	bl	8000b3c <FrameBuffer_setPixel>
    for (uint16_t i = y; i < (h + y); i++)
 8000e60:	8afb      	ldrh	r3, [r7, #22]
 8000e62:	3301      	adds	r3, #1
 8000e64:	82fb      	strh	r3, [r7, #22]
 8000e66:	8afa      	ldrh	r2, [r7, #22]
 8000e68:	88f9      	ldrh	r1, [r7, #6]
 8000e6a:	893b      	ldrh	r3, [r7, #8]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dbe9      	blt.n	8000e46 <FrameBuffer_drawVerticalLine+0x20>
    }
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <FrameBuffer_drawChar>:

        FrameBuffer_drawVerticalLine(buffer, i, y, h, color, mode);
    }
}
void FrameBuffer_drawChar(unsigned char *buffer, char c, uint16_t anchor_x, uint16_t anchor_y, bool color, Mode mode, uint16_t size)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	4608      	mov	r0, r1
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	72fb      	strb	r3, [r7, #11]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	813b      	strh	r3, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	80fb      	strh	r3, [r7, #6]
    if (c < 32 || c > 126)
 8000e96:	7afb      	ldrb	r3, [r7, #11]
 8000e98:	2b1f      	cmp	r3, #31
 8000e9a:	d971      	bls.n	8000f80 <FrameBuffer_drawChar+0x104>
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	2b7e      	cmp	r3, #126	; 0x7e
 8000ea0:	d86e      	bhi.n	8000f80 <FrameBuffer_drawChar+0x104>
        return;

    uint16_t font_width = font_5x8[0];
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	827b      	strh	r3, [r7, #18]
    uint16_t font_height = font_5x8[1];
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	823b      	strh	r3, [r7, #16]

    uint16_t seek = (c - 32) * (font_width * font_height) / 8 + 2;
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	3b20      	subs	r3, #32
 8000eae:	8a7a      	ldrh	r2, [r7, #18]
 8000eb0:	8a39      	ldrh	r1, [r7, #16]
 8000eb2:	fb01 f202 	mul.w	r2, r1, r2
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da00      	bge.n	8000ec0 <FrameBuffer_drawChar+0x44>
 8000ebe:	3307      	adds	r3, #7
 8000ec0:	10db      	asrs	r3, r3, #3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	83fb      	strh	r3, [r7, #30]

    uint16_t b_seek = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	83bb      	strh	r3, [r7, #28]

    for (uint16_t x = 0; x < font_width; x++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	837b      	strh	r3, [r7, #26]
 8000ed0:	e051      	b.n	8000f76 <FrameBuffer_drawChar+0xfa>
    {
        for (uint16_t y = 0; y < font_height; y++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	833b      	strh	r3, [r7, #24]
 8000ed6:	e047      	b.n	8000f68 <FrameBuffer_drawChar+0xec>
        {
            if (font_5x8[seek] >> b_seek & 0b00000001)
 8000ed8:	8bfb      	ldrh	r3, [r7, #30]
 8000eda:	4a2b      	ldr	r2, [pc, #172]	; (8000f88 <FrameBuffer_drawChar+0x10c>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	8bbb      	ldrh	r3, [r7, #28]
 8000ee2:	fa42 f303 	asr.w	r3, r2, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d02e      	beq.n	8000f4c <FrameBuffer_drawChar+0xd0>
            {
                for (uint16_t i = 0; i < size; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82fb      	strh	r3, [r7, #22]
 8000ef2:	e027      	b.n	8000f44 <FrameBuffer_drawChar+0xc8>
                {
                    for (uint16_t j = 0; j < size; j++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	82bb      	strh	r3, [r7, #20]
 8000ef8:	e01d      	b.n	8000f36 <FrameBuffer_drawChar+0xba>
                    {
                        FrameBuffer_setPixel(buffer, (x * size) + anchor_x, (y * size) + anchor_y, color, mode);
 8000efa:	8b7a      	ldrh	r2, [r7, #26]
 8000efc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000efe:	fb12 f303 	smulbb	r3, r2, r3
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	4413      	add	r3, r2
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	b219      	sxth	r1, r3
 8000f0c:	8b3a      	ldrh	r2, [r7, #24]
 8000f0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f10:	fb12 f303 	smulbb	r3, r2, r3
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8000f22:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	4603      	mov	r3, r0
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fe06 	bl	8000b3c <FrameBuffer_setPixel>
                    for (uint16_t j = 0; j < size; j++)
 8000f30:	8abb      	ldrh	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	82bb      	strh	r3, [r7, #20]
 8000f36:	8aba      	ldrh	r2, [r7, #20]
 8000f38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d3dd      	bcc.n	8000efa <FrameBuffer_drawChar+0x7e>
                for (uint16_t i = 0; i < size; i++)
 8000f3e:	8afb      	ldrh	r3, [r7, #22]
 8000f40:	3301      	adds	r3, #1
 8000f42:	82fb      	strh	r3, [r7, #22]
 8000f44:	8afa      	ldrh	r2, [r7, #22]
 8000f46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3d3      	bcc.n	8000ef4 <FrameBuffer_drawChar+0x78>
                    }
                }
            }
            b_seek++;
 8000f4c:	8bbb      	ldrh	r3, [r7, #28]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	83bb      	strh	r3, [r7, #28]
            if (b_seek == 8)
 8000f52:	8bbb      	ldrh	r3, [r7, #28]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d104      	bne.n	8000f62 <FrameBuffer_drawChar+0xe6>
            {
                b_seek = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	83bb      	strh	r3, [r7, #28]
                seek++;
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	83fb      	strh	r3, [r7, #30]
        for (uint16_t y = 0; y < font_height; y++)
 8000f62:	8b3b      	ldrh	r3, [r7, #24]
 8000f64:	3301      	adds	r3, #1
 8000f66:	833b      	strh	r3, [r7, #24]
 8000f68:	8b3a      	ldrh	r2, [r7, #24]
 8000f6a:	8a3b      	ldrh	r3, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3b3      	bcc.n	8000ed8 <FrameBuffer_drawChar+0x5c>
    for (uint16_t x = 0; x < font_width; x++)
 8000f70:	8b7b      	ldrh	r3, [r7, #26]
 8000f72:	3301      	adds	r3, #1
 8000f74:	837b      	strh	r3, [r7, #26]
 8000f76:	8b7a      	ldrh	r2, [r7, #26]
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3a9      	bcc.n	8000ed2 <FrameBuffer_drawChar+0x56>
 8000f7e:	e000      	b.n	8000f82 <FrameBuffer_drawChar+0x106>
        return;
 8000f80:	bf00      	nop
            }
        }
    }
}
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	080063d0 	.word	0x080063d0

08000f8c <FrameBuffer_drawText>:
void FrameBuffer_drawText(unsigned char *buffer, const char *text, uint16_t anchor_x, uint16_t anchor_y, bool color, Mode mode, uint16_t size)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	80fb      	strh	r3, [r7, #6]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	80bb      	strh	r3, [r7, #4]
    uint16_t font_width = font_5x8[0];
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	82bb      	strh	r3, [r7, #20]

    uint16_t n = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	82fb      	strh	r3, [r7, #22]
    while (text[n] != '\0')
 8000faa:	e01f      	b.n	8000fec <FrameBuffer_drawText+0x60>
    {

        FrameBuffer_drawChar(buffer, text[n], anchor_x + (n * font_width * size), anchor_y, color, mode, size);
 8000fac:	8afb      	ldrh	r3, [r7, #22]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	7819      	ldrb	r1, [r3, #0]
 8000fb4:	8afa      	ldrh	r2, [r7, #22]
 8000fb6:	8abb      	ldrh	r3, [r7, #20]
 8000fb8:	fb12 f303 	smulbb	r3, r2, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000fc0:	fb12 f303 	smulbb	r3, r2, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	88b8      	ldrh	r0, [r7, #4]
 8000fce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff4b 	bl	8000e7c <FrameBuffer_drawChar>

        n++;
 8000fe6:	8afb      	ldrh	r3, [r7, #22]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	82fb      	strh	r3, [r7, #22]
    while (text[n] != '\0')
 8000fec:	8afb      	ldrh	r3, [r7, #22]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1d9      	bne.n	8000fac <FrameBuffer_drawText+0x20>
    }
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	0000      	movs	r0, r0
 8001004:	0000      	movs	r0, r0
	...

08001008 <initGame>:
unsigned int difficulty = 0; // will increase with score
unsigned int framecounter;
const unsigned int maxFrameForSpawn = 25;
bool isEnteredExitScreen = false;
void initGame(unsigned char *buffer)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    GameBuffer = buffer;
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <initGame+0x30>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
    enterScreen();
 8001016:	f000 f975 	bl	8001304 <enterScreen>
    spawnArrow(1, 0.5, false);
 800101a:	2100      	movs	r1, #0
 800101c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001030 <initGame+0x28>
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fa47 	bl	80014b4 <spawnArrow>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	00000000 	.word	0x00000000
 8001034:	3fe00000 	.word	0x3fe00000
 8001038:	200002dc 	.word	0x200002dc

0800103c <updateGame>:

bool updateGame()
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af04      	add	r7, sp, #16
    framecounter++;
 8001042:	4ba1      	ldr	r3, [pc, #644]	; (80012c8 <updateGame+0x28c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a9f      	ldr	r2, [pc, #636]	; (80012c8 <updateGame+0x28c>)
 800104a:	6013      	str	r3, [r2, #0]
    if (framecounter > maxFrameForSpawn - difficulty)
 800104c:	2219      	movs	r2, #25
 800104e:	4b9f      	ldr	r3, [pc, #636]	; (80012cc <updateGame+0x290>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1ad2      	subs	r2, r2, r3
 8001054:	4b9c      	ldr	r3, [pc, #624]	; (80012c8 <updateGame+0x28c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d223      	bcs.n	80010a4 <updateGame+0x68>
    {
        spawnArrow(rand() % 4, 0.5 + (difficulty / 2), false);
 800105c:	f003 fe3c 	bl	8004cd8 <rand>
 8001060:	4603      	mov	r3, r0
 8001062:	425a      	negs	r2, r3
 8001064:	f003 0403 	and.w	r4, r3, #3
 8001068:	f002 0303 	and.w	r3, r2, #3
 800106c:	bf58      	it	pl
 800106e:	425c      	negpl	r4, r3
 8001070:	4b96      	ldr	r3, [pc, #600]	; (80012cc <updateGame+0x290>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa44 	bl	8000504 <__aeabi_ui2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b93      	ldr	r3, [pc, #588]	; (80012d0 <updateGame+0x294>)
 8001082:	f7ff f903 	bl	800028c <__adddf3>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	ec43 2b17 	vmov	d7, r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	4620      	mov	r0, r4
 800109a:	f000 fa0b 	bl	80014b4 <spawnArrow>
        framecounter = 0;
 800109e:	4b8a      	ldr	r3, [pc, #552]	; (80012c8 <updateGame+0x28c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    }

    if (Health >= 0)
 80010a4:	4b8b      	ldr	r3, [pc, #556]	; (80012d4 <updateGame+0x298>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f2c0 80fb 	blt.w	80012a4 <updateGame+0x268>
    {

        FrameBuffer_clear(GameBuffer);
 80010ae:	4b8a      	ldr	r3, [pc, #552]	; (80012d8 <updateGame+0x29c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fdd3 	bl	8000c5e <FrameBuffer_clear>
        updateBlocker();
 80010b8:	f000 fc02 	bl	80018c0 <updateBlocker>
        for (int i = 0; i < currentArrowNumber; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e076      	b.n	80011b0 <updateGame+0x174>
        {
            if (arrows[i]->x > 0 && arrows[i]->x < 127 && arrows[i]->y > 0 && arrows[i]->y < 63)
 80010c2:	4a86      	ldr	r2, [pc, #536]	; (80012dc <updateGame+0x2a0>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd49      	ble.n	800116c <updateGame+0x130>
 80010d8:	4a80      	ldr	r2, [pc, #512]	; (80012dc <updateGame+0x2a0>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80012e0 <updateGame+0x2a4>
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d53c      	bpl.n	800116c <updateGame+0x130>
 80010f2:	4a7a      	ldr	r2, [pc, #488]	; (80012dc <updateGame+0x2a0>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd31      	ble.n	800116c <updateGame+0x130>
 8001108:	4a74      	ldr	r2, [pc, #464]	; (80012dc <updateGame+0x2a0>)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	edd3 7a01 	vldr	s15, [r3, #4]
 8001114:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80012e4 <updateGame+0x2a8>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d524      	bpl.n	800116c <updateGame+0x130>
            {
                FrameBuffer_addBitmapImage(GameBuffer, arrows[i]->x, arrows[i]->y, 16, 16, arrows[i]->image, draw);
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <updateGame+0x29c>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <updateGame+0x2a0>)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001136:	ee17 3a90 	vmov	r3, s15
 800113a:	b219      	sxth	r1, r3
 800113c:	4a67      	ldr	r2, [pc, #412]	; (80012dc <updateGame+0x2a0>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	edd3 7a01 	vldr	s15, [r3, #4]
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	ee17 3a90 	vmov	r3, s15
 8001150:	b21a      	sxth	r2, r3
 8001152:	4c62      	ldr	r4, [pc, #392]	; (80012dc <updateGame+0x2a0>)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2401      	movs	r4, #1
 800115e:	9402      	str	r4, [sp, #8]
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	2310      	movs	r3, #16
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2310      	movs	r3, #16
 8001168:	f7ff fd88 	bl	8000c7c <FrameBuffer_addBitmapImage>
            }
            updateArrow(arrows[i]);
 800116c:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <updateGame+0x2a0>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fa3f 	bl	80015f8 <updateArrow>
            if (arrows[i]->isHit)
 800117a:	4a58      	ldr	r2, [pc, #352]	; (80012dc <updateGame+0x2a0>)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	7e1b      	ldrb	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <updateGame+0x156>
            {
                Health--;
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <updateGame+0x298>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <updateGame+0x298>)
 8001190:	6013      	str	r3, [r2, #0]
            }
            if (arrows[i]->blocked)
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <updateGame+0x2a0>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	7e5b      	ldrb	r3, [r3, #25]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <updateGame+0x16e>
            {
                score++;
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <updateGame+0x2ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <updateGame+0x2ac>)
 80011a8:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < currentArrowNumber; i++)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <updateGame+0x2b0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	db83      	blt.n	80010c2 <updateGame+0x86>
            }
        }
        // sort arrows
        for (int i = 0; i < currentArrowNumber; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	e029      	b.n	8001214 <updateGame+0x1d8>
        {
            if (arrows[i]->isHit || arrows[i]->blocked)
 80011c0:	4a46      	ldr	r2, [pc, #280]	; (80012dc <updateGame+0x2a0>)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	7e1b      	ldrb	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <updateGame+0x1a0>
 80011ce:	4a43      	ldr	r2, [pc, #268]	; (80012dc <updateGame+0x2a0>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	7e5b      	ldrb	r3, [r3, #25]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d018      	beq.n	800120e <updateGame+0x1d2>
            {
                for (int j = i; j < currentArrowNumber; j++)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e00b      	b.n	80011fa <updateGame+0x1be>
                {
                    arrows[j] = arrows[j + 1];
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a3d      	ldr	r2, [pc, #244]	; (80012dc <updateGame+0x2a0>)
 80011e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ec:	493b      	ldr	r1, [pc, #236]	; (80012dc <updateGame+0x2a0>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for (int j = i; j < currentArrowNumber; j++)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <updateGame+0x2b0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbee      	blt.n	80011e2 <updateGame+0x1a6>
                }
                currentArrowNumber--;
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <updateGame+0x2b0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a38      	ldr	r2, [pc, #224]	; (80012ec <updateGame+0x2b0>)
 800120c:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < currentArrowNumber; i++)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3301      	adds	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <updateGame+0x2b0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbd0      	blt.n	80011c0 <updateGame+0x184>
            }
        }
        char point[3];
        sprintf(point, "%d", score);
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <updateGame+0x2ac>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	463b      	mov	r3, r7
 8001224:	4932      	ldr	r1, [pc, #200]	; (80012f0 <updateGame+0x2b4>)
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fe56 	bl	8004ed8 <siprintf>
        FrameBuffer_addBitmapImage(GameBuffer, 60, 29, 16, 16, HerathFrames[7 - Health], draw);
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <updateGame+0x29c>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <updateGame+0x298>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1c3 0307 	rsb	r3, r3, #7
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <updateGame+0x2b8>)
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	2201      	movs	r2, #1
 8001240:	9202      	str	r2, [sp, #8]
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2310      	movs	r3, #16
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2310      	movs	r3, #16
 800124a:	221d      	movs	r2, #29
 800124c:	213c      	movs	r1, #60	; 0x3c
 800124e:	f7ff fd15 	bl	8000c7c <FrameBuffer_addBitmapImage>
        FrameBuffer_drawText(GameBuffer, "Score:", 0, 0, true, draw, 1);
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <updateGame+0x29c>)
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2301      	movs	r3, #1
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2300      	movs	r3, #0
 8001264:	2200      	movs	r2, #0
 8001266:	4924      	ldr	r1, [pc, #144]	; (80012f8 <updateGame+0x2bc>)
 8001268:	f7ff fe90 	bl	8000f8c <FrameBuffer_drawText>
        FrameBuffer_drawText(GameBuffer, point, 35, 0, true, draw, 1);
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <updateGame+0x29c>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	4639      	mov	r1, r7
 8001272:	2301      	movs	r3, #1
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2301      	movs	r3, #1
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2223      	movs	r2, #35	; 0x23
 8001282:	f7ff fe83 	bl	8000f8c <FrameBuffer_drawText>
        drawBlocker();
 8001286:	f000 fab3 	bl	80017f0 <drawBlocker>
        difficulty = (int)(score / 7);
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <updateGame+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <updateGame+0x2c0>)
 8001290:	fb82 1203 	smull	r1, r2, r2, r3
 8001294:	441a      	add	r2, r3
 8001296:	1092      	asrs	r2, r2, #2
 8001298:	17db      	asrs	r3, r3, #31
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <updateGame+0x290>)
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00b      	b.n	80012bc <updateGame+0x280>
    }
    else
    {
        if (isEnteredExitScreen == false)
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <updateGame+0x2c4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f083 0301 	eor.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <updateGame+0x280>
        {
            isEnteredExitScreen = true;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <updateGame+0x2c4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
            exitScreen();
 80012b8:	f000 f8ba 	bl	8001430 <exitScreen>
        }
    }
}
 80012bc:	bf00      	nop
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002e4 	.word	0x200002e4
 80012cc:	200002e0 	.word	0x200002e0
 80012d0:	3fe00000 	.word	0x3fe00000
 80012d4:	200001f0 	.word	0x200001f0
 80012d8:	200002dc 	.word	0x200002dc
 80012dc:	200002b0 	.word	0x200002b0
 80012e0:	42fe0000 	.word	0x42fe0000
 80012e4:	427c0000 	.word	0x427c0000
 80012e8:	200002d4 	.word	0x200002d4
 80012ec:	200002d0 	.word	0x200002d0
 80012f0:	08005f04 	.word	0x08005f04
 80012f4:	200001d4 	.word	0x200001d4
 80012f8:	08005f08 	.word	0x08005f08
 80012fc:	92492493 	.word	0x92492493
 8001300:	200002e8 	.word	0x200002e8

08001304 <enterScreen>:
void enterScreen()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af04      	add	r7, sp, #16
    bool outScreen = false;
 800130a:	2300      	movs	r3, #0
 800130c:	71fb      	strb	r3, [r7, #7]
    while (!outScreen)
 800130e:	e074      	b.n	80013fa <enterScreen+0xf6>
    {
        FrameBuffer_clear(GameBuffer);
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <enterScreen+0x10c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fca2 	bl	8000c5e <FrameBuffer_clear>

        FrameBuffer_drawText(GameBuffer, "Welcome to", 40, 0, true, draw, 1);
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <enterScreen+0x10c>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2301      	movs	r3, #1
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	2228      	movs	r2, #40	; 0x28
 800132e:	4939      	ldr	r1, [pc, #228]	; (8001414 <enterScreen+0x110>)
 8001330:	f7ff fe2c 	bl	8000f8c <FrameBuffer_drawText>
        FrameBuffer_drawText(GameBuffer, "the GAME", 40, 10, true, draw, 1);
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <enterScreen+0x10c>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2301      	movs	r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2301      	movs	r3, #1
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	230a      	movs	r3, #10
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	4933      	ldr	r1, [pc, #204]	; (8001418 <enterScreen+0x114>)
 800134a:	f7ff fe1f 	bl	8000f8c <FrameBuffer_drawText>
        FrameBuffer_drawText(GameBuffer, "Press any", 40, 20, true, draw, 1);
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <enterScreen+0x10c>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2301      	movs	r3, #1
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2314      	movs	r3, #20
 8001360:	2228      	movs	r2, #40	; 0x28
 8001362:	492e      	ldr	r1, [pc, #184]	; (800141c <enterScreen+0x118>)
 8001364:	f7ff fe12 	bl	8000f8c <FrameBuffer_drawText>
        FrameBuffer_drawText(GameBuffer, "button to", 40, 30, true, draw, 1);
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <enterScreen+0x10c>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	2301      	movs	r3, #1
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	231e      	movs	r3, #30
 800137a:	2228      	movs	r2, #40	; 0x28
 800137c:	4928      	ldr	r1, [pc, #160]	; (8001420 <enterScreen+0x11c>)
 800137e:	f7ff fe05 	bl	8000f8c <FrameBuffer_drawText>
        FrameBuffer_drawText(GameBuffer, "start", 40, 40, true, draw, 1);
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <enterScreen+0x10c>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	2301      	movs	r3, #1
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	2301      	movs	r3, #1
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2328      	movs	r3, #40	; 0x28
 8001394:	2228      	movs	r2, #40	; 0x28
 8001396:	4923      	ldr	r1, [pc, #140]	; (8001424 <enterScreen+0x120>)
 8001398:	f7ff fdf8 	bl	8000f8c <FrameBuffer_drawText>

        if (HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	4821      	ldr	r0, [pc, #132]	; (8001428 <enterScreen+0x124>)
 80013a2:	f001 fb35 	bl	8002a10 <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <enterScreen+0xae>
        {
            outScreen = true;
 80013ac:	2301      	movs	r3, #1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	e01e      	b.n	80013f0 <enterScreen+0xec>
        }
        else if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 80013b2:	2110      	movs	r1, #16
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <enterScreen+0x128>)
 80013b6:	f001 fb2b 	bl	8002a10 <HAL_GPIO_ReadPin>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <enterScreen+0xc2>
        {
            outScreen = true;
 80013c0:	2301      	movs	r3, #1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	e014      	b.n	80013f0 <enterScreen+0xec>
        }
        else if (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <enterScreen+0x124>)
 80013cc:	f001 fb20 	bl	8002a10 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <enterScreen+0xd8>
        {
            outScreen = true;
 80013d6:	2301      	movs	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e009      	b.n	80013f0 <enterScreen+0xec>
        }
        else if (HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 80013dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <enterScreen+0x128>)
 80013e2:	f001 fb15 	bl	8002a10 <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <enterScreen+0xec>
        {
            outScreen = true;
 80013ec:	2301      	movs	r3, #1
 80013ee:	71fb      	strb	r3, [r7, #7]
        }

        sendBuffer(GameBuffer);
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <enterScreen+0x10c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fb01 	bl	80019fc <sendBuffer>
    while (!outScreen)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d184      	bne.n	8001310 <enterScreen+0xc>
    }
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002dc 	.word	0x200002dc
 8001414:	08005f10 	.word	0x08005f10
 8001418:	08005f1c 	.word	0x08005f1c
 800141c:	08005f28 	.word	0x08005f28
 8001420:	08005f34 	.word	0x08005f34
 8001424:	08005f40 	.word	0x08005f40
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400

08001430 <exitScreen>:
void exitScreen()
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <InBox>:

bool InBox(int x3, int y3, int x1, int y1, int x2, int y2)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]

    if (x1 > x2)
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	429a      	cmp	r2, r3
        x1, x2 = x2, x1;
    if (y1 > y2)
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	429a      	cmp	r2, r3
        y1, y2 = y2, y1;

    if ((x3 > x1) & (x3 < x2))
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	bfcc      	ite	gt
 8001460:	2301      	movgt	r3, #1
 8001462:	2300      	movle	r3, #0
 8001464:	b2da      	uxtb	r2, r3
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	4299      	cmp	r1, r3
 800146c:	bfb4      	ite	lt
 800146e:	2301      	movlt	r3, #1
 8001470:	2300      	movge	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4013      	ands	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <InBox+0x66>
        if ((y3 > y1) & (y3 < y2))
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	bfcc      	ite	gt
 8001484:	2301      	movgt	r3, #1
 8001486:	2300      	movle	r3, #0
 8001488:	b2da      	uxtb	r2, r3
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4299      	cmp	r1, r3
 8001490:	bfb4      	ite	lt
 8001492:	2301      	movlt	r3, #1
 8001494:	2300      	movge	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4013      	ands	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <InBox+0x66>
            return true;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <InBox+0x68>
    return false;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <spawnArrow>:
void spawnArrow(int dir, float speed, bool isSpecial)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80014c0:	460b      	mov	r3, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
    arrow *arrw = malloc(sizeof(arrow));
 80014c4:	2020      	movs	r0, #32
 80014c6:	f003 fb53 	bl	8004b70 <malloc>
 80014ca:	4603      	mov	r3, r0
 80014cc:	617b      	str	r3, [r7, #20]
    switch (dir)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d868      	bhi.n	80015a6 <spawnArrow+0xf2>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <spawnArrow+0x28>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	08001519 	.word	0x08001519
 80014e4:	08001547 	.word	0x08001547
 80014e8:	08001577 	.word	0x08001577
    {
    case 0:
        arrw->image = arrowFrame1;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <spawnArrow+0x120>)
 80014f0:	61da      	str	r2, [r3, #28]
        arrw->x = 60, arrw->y = -16;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <spawnArrow+0x124>)
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <spawnArrow+0x128>)
 80014fc:	605a      	str	r2, [r3, #4]
        arrw->topxOffset = 8, arrw->topyOffset = 8;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2208      	movs	r2, #8
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2208      	movs	r2, #8
 8001508:	60da      	str	r2, [r3, #12]
        arrw->blocked = false;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2200      	movs	r2, #0
 800150e:	765a      	strb	r2, [r3, #25]
        arrw->isHit = false;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2200      	movs	r2, #0
 8001514:	761a      	strb	r2, [r3, #24]
        break;
 8001516:	e046      	b.n	80015a6 <spawnArrow+0xf2>
    case 1:
        arrw->image = arrowFrame2;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <spawnArrow+0x12c>)
 800151c:	61da      	str	r2, [r3, #28]
        arrw->x = 0, arrw->y = 28;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <spawnArrow+0x130>)
 800152a:	605a      	str	r2, [r3, #4]
        arrw->topxOffset = 16, arrw->topyOffset = 8;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2210      	movs	r2, #16
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2208      	movs	r2, #8
 8001536:	60da      	str	r2, [r3, #12]
        arrw->blocked = false;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2200      	movs	r2, #0
 800153c:	765a      	strb	r2, [r3, #25]
        arrw->isHit = false;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2200      	movs	r2, #0
 8001542:	761a      	strb	r2, [r3, #24]
        break;
 8001544:	e02f      	b.n	80015a6 <spawnArrow+0xf2>
    case 2:
        arrw->image = arrowFrame3;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <spawnArrow+0x134>)
 800154a:	61da      	str	r2, [r3, #28]
        arrw->x = 60, arrw->y = 64;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <spawnArrow+0x124>)
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8001558:	605a      	str	r2, [r3, #4]
        arrw->topxOffset = 8, arrw->topyOffset = -1;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2208      	movs	r2, #8
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f04f 32ff 	mov.w	r2, #4294967295
 8001566:	60da      	str	r2, [r3, #12]
        arrw->blocked = false;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2200      	movs	r2, #0
 800156c:	765a      	strb	r2, [r3, #25]
        arrw->isHit = false;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2200      	movs	r2, #0
 8001572:	761a      	strb	r2, [r3, #24]
        break;
 8001574:	e017      	b.n	80015a6 <spawnArrow+0xf2>
    case 3:
        arrw->image = arrowFrame4;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <spawnArrow+0x138>)
 800157a:	61da      	str	r2, [r3, #28]
        arrw->x = 128, arrw->y = 28;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f04f 4286 	mov.w	r2, #1124073472	; 0x43000000
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <spawnArrow+0x130>)
 8001588:	605a      	str	r2, [r3, #4]
        arrw->topxOffset = -1, arrw->topyOffset = 8;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2208      	movs	r2, #8
 8001596:	60da      	str	r2, [r3, #12]
        arrw->blocked = false;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2200      	movs	r2, #0
 800159c:	765a      	strb	r2, [r3, #25]
        arrw->isHit = false;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2200      	movs	r2, #0
 80015a2:	761a      	strb	r2, [r3, #24]
        break;
 80015a4:	bf00      	nop
    }
    arrw->direction = dir;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	611a      	str	r2, [r3, #16]
    arrw->speed = 0.5;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80015b2:	615a      	str	r2, [r3, #20]
    arrows[currentArrowNumber] = arrw;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <spawnArrow+0x13c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <spawnArrow+0x140>)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    currentArrowNumber++;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <spawnArrow+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <spawnArrow+0x13c>)
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000f4 	.word	0x200000f4
 80015d8:	42700000 	.word	0x42700000
 80015dc:	c1800000 	.word	0xc1800000
 80015e0:	20000114 	.word	0x20000114
 80015e4:	41e00000 	.word	0x41e00000
 80015e8:	20000134 	.word	0x20000134
 80015ec:	20000154 	.word	0x20000154
 80015f0:	200002d0 	.word	0x200002d0
 80015f4:	200002b0 	.word	0x200002b0

080015f8 <updateArrow>:
void updateArrow(arrow *arrw)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
    switch (arrw->direction)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d83b      	bhi.n	8001680 <updateArrow+0x88>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <updateArrow+0x18>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001621 	.word	0x08001621
 8001614:	08001639 	.word	0x08001639
 8001618:	08001651 	.word	0x08001651
 800161c:	08001669 	.word	0x08001669
    {
    case 0:
        arrw->y += arrw->speed;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	ed93 7a01 	vldr	s14, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edd3 7a05 	vldr	s15, [r3, #20]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edc3 7a01 	vstr	s15, [r3, #4]
        break;
 8001636:	e023      	b.n	8001680 <updateArrow+0x88>
    case 1:
        arrw->x += arrw->speed;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a05 	vldr	s15, [r3, #20]
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800164e:	e017      	b.n	8001680 <updateArrow+0x88>
    case 2:
        arrw->y -= arrw->speed;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	ed93 7a01 	vldr	s14, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edd3 7a05 	vldr	s15, [r3, #20]
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edc3 7a01 	vstr	s15, [r3, #4]
        break;
 8001666:	e00b      	b.n	8001680 <updateArrow+0x88>
    case 3:
        arrw->x -= arrw->speed;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 7a05 	vldr	s15, [r3, #20]
 8001674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800167e:	bf00      	nop
    }
    bool isBlocked = false;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]
    //FrameBuffer_drawRect(GameBuffer, 54, 24, 22, 28, true, draw);
    //FrameBuffer_drawRect(GameBuffer, arrw->x + arrw->topxOffset, arrw->y + arrw->topyOffset, 2, 2, true, draw);
    if (InBox(arrw->x + arrw->topxOffset, arrw->y + arrw->topyOffset, 60, 30, 74, 43)) // hearth hurtbox
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b8:	232b      	movs	r3, #43	; 0x2b
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	234a      	movs	r3, #74	; 0x4a
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	231e      	movs	r3, #30
 80016c2:	223c      	movs	r2, #60	; 0x3c
 80016c4:	ee17 1a90 	vmov	r1, s15
 80016c8:	ee16 0a90 	vmov	r0, s13
 80016cc:	f7ff feb7 	bl	800143e <InBox>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <updateArrow+0xe6>
    {
        arrw->isHit = true;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	761a      	strb	r2, [r3, #24]
 80016dc:	e02a      	b.n	8001734 <updateArrow+0x13c>
    }
    else if (InBox(arrw->x + arrw->topxOffset, arrw->y + arrw->topyOffset, 54, 24, 76, 52)) // blocker hitbox
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001712:	2334      	movs	r3, #52	; 0x34
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	234c      	movs	r3, #76	; 0x4c
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2318      	movs	r3, #24
 800171c:	2236      	movs	r2, #54	; 0x36
 800171e:	ee17 1a90 	vmov	r1, s15
 8001722:	ee16 0a90 	vmov	r0, s13
 8001726:	f7ff fe8a 	bl	800143e <InBox>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <updateArrow+0x13c>
    {
        isBlocked = true;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
    }

    // check if the blocked facing the arrow
    switch (arrw->direction)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d852      	bhi.n	80017e2 <updateArrow+0x1ea>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <updateArrow+0x14c>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	08001775 	.word	0x08001775
 800174c:	08001795 	.word	0x08001795
 8001750:	080017b5 	.word	0x080017b5
    {
    case 0:
        if ((blockerState == 0) & (isBlocked))
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <updateArrow+0x1f4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d033      	beq.n	80017d4 <updateArrow+0x1dc>
        {

            arrw->blocked = true;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	765a      	strb	r2, [r3, #25]
        }
        break;
 8001772:	e02f      	b.n	80017d4 <updateArrow+0x1dc>
    case 1:
        if ((blockerState == 1) & (isBlocked))
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <updateArrow+0x1f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d025      	beq.n	80017d8 <updateArrow+0x1e0>
        {

            arrw->blocked = true;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	765a      	strb	r2, [r3, #25]
        }
        break;
 8001792:	e021      	b.n	80017d8 <updateArrow+0x1e0>
    case 2:
        if ((blockerState == 2) & (isBlocked))
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <updateArrow+0x1f4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b02      	cmp	r3, #2
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d017      	beq.n	80017dc <updateArrow+0x1e4>
        {

            arrw->blocked = true;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	765a      	strb	r2, [r3, #25]
        }
        break;
 80017b2:	e013      	b.n	80017dc <updateArrow+0x1e4>
    case 3:
        if ((blockerState == 3) & (isBlocked))
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <updateArrow+0x1f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d009      	beq.n	80017e0 <updateArrow+0x1e8>
        {

            arrw->blocked = true;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	765a      	strb	r2, [r3, #25]
        }
        break;
 80017d2:	e005      	b.n	80017e0 <updateArrow+0x1e8>
        break;
 80017d4:	bf00      	nop
 80017d6:	e004      	b.n	80017e2 <updateArrow+0x1ea>
        break;
 80017d8:	bf00      	nop
 80017da:	e002      	b.n	80017e2 <updateArrow+0x1ea>
        break;
 80017dc:	bf00      	nop
 80017de:	e000      	b.n	80017e2 <updateArrow+0x1ea>
        break;
 80017e0:	bf00      	nop
    }
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002d8 	.word	0x200002d8

080017f0 <drawBlocker>:

void drawBlocker()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af04      	add	r7, sp, #16

    switch (blockerState)
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <drawBlocker+0xb8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d842      	bhi.n	8001884 <drawBlocker+0x94>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <drawBlocker+0x14>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	08001831 	.word	0x08001831
 800180c:	0800184d 	.word	0x0800184d
 8001810:	08001869 	.word	0x08001869
    {
    case 0:
        FrameBuffer_addBitmapImage(GameBuffer, 55, 25, 24, 8, spearFrame1, draw);
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <drawBlocker+0xbc>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <drawBlocker+0xc0>)
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	2308      	movs	r3, #8
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2318      	movs	r3, #24
 8001826:	2219      	movs	r2, #25
 8001828:	2137      	movs	r1, #55	; 0x37
 800182a:	f7ff fa27 	bl	8000c7c <FrameBuffer_addBitmapImage>
        break;
 800182e:	e037      	b.n	80018a0 <drawBlocker+0xb0>
    case 1:
        FrameBuffer_addBitmapImage(GameBuffer, 53, 25, 8, 24, spearFrame4, draw);
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <drawBlocker+0xbc>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <drawBlocker+0xc4>)
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2318      	movs	r3, #24
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2308      	movs	r3, #8
 8001842:	2219      	movs	r2, #25
 8001844:	2135      	movs	r1, #53	; 0x35
 8001846:	f7ff fa19 	bl	8000c7c <FrameBuffer_addBitmapImage>
        break;
 800184a:	e029      	b.n	80018a0 <drawBlocker+0xb0>
    case 2:
        FrameBuffer_addBitmapImage(GameBuffer, 55, 64 - 22, 24, 8, spearFrame3, draw);
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <drawBlocker+0xbc>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <drawBlocker+0xc8>)
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2308      	movs	r3, #8
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2318      	movs	r3, #24
 800185e:	222a      	movs	r2, #42	; 0x2a
 8001860:	2137      	movs	r1, #55	; 0x37
 8001862:	f7ff fa0b 	bl	8000c7c <FrameBuffer_addBitmapImage>
        break;
 8001866:	e01b      	b.n	80018a0 <drawBlocker+0xb0>
    case 3:
        FrameBuffer_addBitmapImage(GameBuffer, 128 - 53, 25, 8, 24, spearFrame2, draw);
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <drawBlocker+0xbc>)
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	2301      	movs	r3, #1
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <drawBlocker+0xcc>)
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2318      	movs	r3, #24
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2308      	movs	r3, #8
 800187a:	2219      	movs	r2, #25
 800187c:	214b      	movs	r1, #75	; 0x4b
 800187e:	f7ff f9fd 	bl	8000c7c <FrameBuffer_addBitmapImage>
        break;
 8001882:	e00d      	b.n	80018a0 <drawBlocker+0xb0>
    default:
        FrameBuffer_addBitmapImage(GameBuffer, 55, 25, 24, 8, spearFrame1, draw);
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <drawBlocker+0xbc>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <drawBlocker+0xc0>)
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2308      	movs	r3, #8
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2318      	movs	r3, #24
 8001896:	2219      	movs	r2, #25
 8001898:	2137      	movs	r1, #55	; 0x37
 800189a:	f7ff f9ef 	bl	8000c7c <FrameBuffer_addBitmapImage>
        break;
 800189e:	bf00      	nop
    }
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002d8 	.word	0x200002d8
 80018ac:	200002dc 	.word	0x200002dc
 80018b0:	20000174 	.word	0x20000174
 80018b4:	200001bc 	.word	0x200001bc
 80018b8:	200001a4 	.word	0x200001a4
 80018bc:	2000018c 	.word	0x2000018c

080018c0 <updateBlocker>:

void updateBlocker()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
 80018c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c8:	4816      	ldr	r0, [pc, #88]	; (8001924 <updateBlocker+0x64>)
 80018ca:	f001 f8a1 	bl	8002a10 <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <updateBlocker+0x1c>
    {
        blockerState = 0;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <updateBlocker+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    }
    else if (HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
    {
        blockerState = 2;
    }
}
 80018da:	e021      	b.n	8001920 <updateBlocker+0x60>
    else if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 80018dc:	2110      	movs	r1, #16
 80018de:	4813      	ldr	r0, [pc, #76]	; (800192c <updateBlocker+0x6c>)
 80018e0:	f001 f896 	bl	8002a10 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <updateBlocker+0x32>
        blockerState = 3;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <updateBlocker+0x68>)
 80018ec:	2203      	movs	r2, #3
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	e016      	b.n	8001920 <updateBlocker+0x60>
    else if (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <updateBlocker+0x64>)
 80018f8:	f001 f88a 	bl	8002a10 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <updateBlocker+0x4a>
        blockerState = 1;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <updateBlocker+0x68>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	e00a      	b.n	8001920 <updateBlocker+0x60>
    else if (HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 800190a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <updateBlocker+0x6c>)
 8001910:	f001 f87e 	bl	8002a10 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <updateBlocker+0x60>
        blockerState = 2;
 800191a:	4b03      	ldr	r3, [pc, #12]	; (8001928 <updateBlocker+0x68>)
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020000 	.word	0x40020000
 8001928:	200002d8 	.word	0x200002d8
 800192c:	40020400 	.word	0x40020400

08001930 <cmd>:
#include "oled.h"

bool inverted;
SPI_HandleTypeDef *spiPort;
void cmd(uint8_t cmd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
    PinOff(dcPinPort, dcPin);
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <cmd+0x2c>)
 8001940:	f001 f87e 	bl	8002a40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spiPort, &cmd, 1, 100);
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <cmd+0x30>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	1df9      	adds	r1, r7, #7
 800194a:	2364      	movs	r3, #100	; 0x64
 800194c:	2201      	movs	r2, #1
 800194e:	f001 fdb2 	bl	80034b6 <HAL_SPI_Transmit>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020800 	.word	0x40020800
 8001960:	200002ec 	.word	0x200002ec

08001964 <InitOled>:
void InitOled(SPI_HandleTypeDef *spi)
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    spiPort = spi;
 800196c:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <InitOled+0x88>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
    uint8_t setup[] = {
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <InitOled+0x8c>)
 8001974:	f107 0408 	add.w	r4, r7, #8
 8001978:	461d      	mov	r5, r3
 800197a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001982:	c403      	stmia	r4!, {r0, r1}
 8001984:	8022      	strh	r2, [r4, #0]
 8001986:	3402      	adds	r4, #2
 8001988:	0c13      	lsrs	r3, r2, #16
 800198a:	7023      	strb	r3, [r4, #0]
        0x14,

        SSD1306_DISPLAYALL_ON_RESUME,
        SSD1306_DISPLAY_ON};

    PinOn(resetPinPort, resetPin);
 800198c:	2201      	movs	r2, #1
 800198e:	2140      	movs	r1, #64	; 0x40
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <InitOled+0x90>)
 8001992:	f001 f855 	bl	8002a40 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001996:	2005      	movs	r0, #5
 8001998:	f000 fdac 	bl	80024f4 <HAL_Delay>
    PinOff(resetPinPort, resetPin);
 800199c:	2200      	movs	r2, #0
 800199e:	2140      	movs	r1, #64	; 0x40
 80019a0:	4814      	ldr	r0, [pc, #80]	; (80019f4 <InitOled+0x90>)
 80019a2:	f001 f84d 	bl	8002a40 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80019a6:	2005      	movs	r0, #5
 80019a8:	f000 fda4 	bl	80024f4 <HAL_Delay>
    PinOn(resetPinPort, resetPin);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2140      	movs	r1, #64	; 0x40
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <InitOled+0x90>)
 80019b2:	f001 f845 	bl	8002a40 <HAL_GPIO_WritePin>
    PinOff(dcPinPort, dcPin);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	480f      	ldr	r0, [pc, #60]	; (80019f8 <InitOled+0x94>)
 80019bc:	f001 f840 	bl	8002a40 <HAL_GPIO_WritePin>
    for (int i = 0; i < 27; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
 80019c4:	e00a      	b.n	80019dc <InitOled+0x78>
    {
        cmd(setup[i]);
 80019c6:	f107 0208 	add.w	r2, r7, #8
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	4413      	add	r3, r2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffad 	bl	8001930 <cmd>
    for (int i = 0; i < 27; i++)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	3301      	adds	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	2b1a      	cmp	r3, #26
 80019e0:	ddf1      	ble.n	80019c6 <InitOled+0x62>
    }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	200002ec 	.word	0x200002ec
 80019f0:	08005f48 	.word	0x08005f48
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800

080019fc <sendBuffer>:

void sendBuffer(uint8_t *buffer)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    PinOff(dcPinPort, dcPin);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	4817      	ldr	r0, [pc, #92]	; (8001a68 <sendBuffer+0x6c>)
 8001a0a:	f001 f819 	bl	8002a40 <HAL_GPIO_WritePin>
    cmd(SSD1306_PAGEADDR); // Set page address from min to max
 8001a0e:	2022      	movs	r0, #34	; 0x22
 8001a10:	f7ff ff8e 	bl	8001930 <cmd>
    cmd(0x00);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff ff8b 	bl	8001930 <cmd>
    cmd(0xff);
 8001a1a:	20ff      	movs	r0, #255	; 0xff
 8001a1c:	f7ff ff88 	bl	8001930 <cmd>
    cmd(SSD1306_COLUMNADDR); // Set column address from min to max
 8001a20:	2021      	movs	r0, #33	; 0x21
 8001a22:	f7ff ff85 	bl	8001930 <cmd>
    cmd(0x00);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff ff82 	bl	8001930 <cmd>
    cmd(127);
 8001a2c:	207f      	movs	r0, #127	; 0x7f
 8001a2e:	f7ff ff7f 	bl	8001930 <cmd>

    // create a temporary buffer of size of buffer plus 1 byte for startline command aka 0x40
    unsigned char data[1];
    data[0] = SSD1306_STARTLINE;
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(spiPort, &data, 1, 100);
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <sendBuffer+0x70>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f107 010c 	add.w	r1, r7, #12
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	2201      	movs	r2, #1
 8001a42:	f001 fd38 	bl	80034b6 <HAL_SPI_Transmit>
    PinOn(dcPinPort, dcPin);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <sendBuffer+0x6c>)
 8001a4c:	f000 fff8 	bl	8002a40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spiPort, buffer, 1024, 100);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <sendBuffer+0x70>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f001 fd2b 	bl	80034b6 <HAL_SPI_Transmit>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	200002ec 	.word	0x200002ec

08001a70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a76:	f000 fccb 	bl	8002410 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a7a:	f000 f877 	bl	8001b6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a7e:	f000 f9e3 	bl	8001e48 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001a82:	f000 f9b7 	bl	8001df4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001a86:	f000 f8dd 	bl	8001c44 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001a8a:	f000 f911 	bl	8001cb0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4830      	ldr	r0, [pc, #192]	; (8001b54 <main+0xe4>)
 8001a92:	f001 ffd7 	bl	8003a44 <HAL_TIM_PWM_Start>
	buzzerSetNewFrequency(0);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7fe ff2c 	bl	80008f4 <buzzerSetNewFrequency>
	buffer = malloc(buffer_size); // create the buffer
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <main+0xe8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 f865 	bl	8004b70 <malloc>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <main+0xec>)
 8001aac:	601a      	str	r2, [r3, #0]
	FrameBuffer_clear(buffer);    // and clean the buffer
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <main+0xec>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f8d3 	bl	8000c5e <FrameBuffer_clear>
	FrameBuffer_drawRect(buffer, 0, 0, 127, 63, true, draw);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <main+0xec>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	2301      	movs	r3, #1
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	233f      	movs	r3, #63	; 0x3f
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	237f      	movs	r3, #127	; 0x7f
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	f7ff f935 	bl	8000d3c <FrameBuffer_drawRect>
	FrameBuffer_drawRect(buffer, 15, 15, 50, 20, true, draw);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <main+0xec>)
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	2314      	movs	r3, #20
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2332      	movs	r3, #50	; 0x32
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f7ff f928 	bl	8000d3c <FrameBuffer_drawRect>
	FrameBuffer_addBitmapImage(buffer, 50, 30, 16, 16, &hearthFrame1, invert);
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <main+0xec>)
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <main+0xf0>)
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2310      	movs	r3, #16
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2310      	movs	r3, #16
 8001b00:	221e      	movs	r2, #30
 8001b02:	2132      	movs	r1, #50	; 0x32
 8001b04:	f7ff f8ba 	bl	8000c7c <FrameBuffer_addBitmapImage>
	 * melodySlowfactor[melodyIndex]);

	 }
	 }
	 buzzerSetNewFrequency(0);*/
	InitOled(&hspi1);
 8001b08:	4816      	ldr	r0, [pc, #88]	; (8001b64 <main+0xf4>)
 8001b0a:	f7ff ff2b 	bl	8001964 <InitOled>

	initGame(buffer);
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <main+0xec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fa78 	bl	8001008 <initGame>
	enterScreen();
 8001b18:	f7ff fbf4 	bl	8001304 <enterScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t gameTick = uwTickFreq + 10;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <main+0xf8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	330a      	adds	r3, #10
 8001b22:	603b      	str	r3, [r7, #0]
	uint32_t gameTimer = HAL_GetTick();
 8001b24:	f000 fcda 	bl	80024dc <HAL_GetTick>
 8001b28:	6078      	str	r0, [r7, #4]
	while (1) {
		if (HAL_GetTick() - gameTimer > gameTick) {
 8001b2a:	f000 fcd7 	bl	80024dc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d209      	bcs.n	8001b4e <main+0xde>

			updateGame();
 8001b3a:	f7ff fa7f 	bl	800103c <updateGame>
			sendBuffer(buffer);
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <main+0xec>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff5a 	bl	80019fc <sendBuffer>
			gameTimer = HAL_GetTick();
 8001b48:	f000 fcc8 	bl	80024dc <HAL_GetTick>
 8001b4c:	6078      	str	r0, [r7, #4]

		}
		//HAL_Delay(10);
		musicHandler();
 8001b4e:	f7fe feff 	bl	8000950 <musicHandler>
		if (HAL_GetTick() - gameTimer > gameTick) {
 8001b52:	e7ea      	b.n	8001b2a <main+0xba>
 8001b54:	20000348 	.word	0x20000348
 8001b58:	080065b0 	.word	0x080065b0
 8001b5c:	200003d8 	.word	0x200003d8
 8001b60:	200001f4 	.word	0x200001f4
 8001b64:	200002f0 	.word	0x200002f0
 8001b68:	2000021c 	.word	0x2000021c

08001b6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fa0f 	bl	8004f9e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <SystemClock_Config+0xd0>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <SystemClock_Config+0xd0>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <SystemClock_Config+0xd0>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <SystemClock_Config+0xd4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb8:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <SystemClock_Config+0xd4>)
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <SystemClock_Config+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001be0:	2310      	movs	r3, #16
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001be4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bea:	2304      	movs	r3, #4
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 ff3c 	bl	8002a74 <HAL_RCC_OscConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0x9a>
		Error_Handler();
 8001c02:	f000 f9bf 	bl	8001f84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c06:	230f      	movs	r3, #15
 8001c08:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2102      	movs	r1, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 f99e 	bl	8002f64 <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xc6>
		Error_Handler();
 8001c2e:	f000 f9a9 	bl	8001f84 <Error_Handler>
	}
}
 8001c32:	bf00      	nop
 8001c34:	3750      	adds	r7, #80	; 0x50
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <MX_SPI1_Init+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c54:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c74:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c78:	2220      	movs	r2, #32
 8001c7a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c90:	220a      	movs	r2, #10
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_SPI1_Init+0x64>)
 8001c96:	f001 fb85 	bl	80033a4 <HAL_SPI_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001ca0:	f000 f970 	bl	8001f84 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200002f0 	.word	0x200002f0
 8001cac:	40013000 	.word	0x40013000

08001cb0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b096      	sub	sp, #88	; 0x58
 8001cb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 f958 	bl	8004f9e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001cf0:	4a3f      	ldr	r2, [pc, #252]	; (8001df0 <MX_TIM1_Init+0x140>)
 8001cf2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 84 - 1;
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001cf6:	2253      	movs	r2, #83	; 0x53
 8001cf8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 60000;
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d02:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001d06:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001d1a:	4834      	ldr	r0, [pc, #208]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d1c:	f001 fdea 	bl	80038f4 <HAL_TIM_Base_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001d26:	f000 f92d 	bl	8001f84 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d34:	4619      	mov	r1, r3
 8001d36:	482d      	ldr	r0, [pc, #180]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d38:	f001 fff6 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001d42:	f000 f91f 	bl	8001f84 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001d46:	4829      	ldr	r0, [pc, #164]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d48:	f001 fe23 	bl	8003992 <HAL_TIM_PWM_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001d52:	f000 f917 	bl	8001f84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d62:	4619      	mov	r1, r3
 8001d64:	4821      	ldr	r0, [pc, #132]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d66:	f002 fb7f 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001d70:	f000 f908 	bl	8001f84 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d74:	2360      	movs	r3, #96	; 0x60
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 3000;
 8001d78:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	2208      	movs	r2, #8
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001d9c:	f001 ff02 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8001da6:	f000 f8ed 	bl	8001f84 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001dce:	f002 fbb9 	bl	8004544 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8001dd8:	f000 f8d4 	bl	8001f84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM1_Init+0x13c>)
 8001dde:	f000 f969 	bl	80020b4 <HAL_TIM_MspPostInit>

}
 8001de2:	bf00      	nop
 8001de4:	3758      	adds	r7, #88	; 0x58
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000348 	.word	0x20000348
 8001df0:	40010000 	.word	0x40010000

08001df4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_USART2_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f002 fbdc 	bl	80045e8 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001e36:	f000 f8a5 	bl	8001f84 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000390 	.word	0x20000390
 8001e44:	40004400 	.word	0x40004400

08001e48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a43      	ldr	r2, [pc, #268]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a3c      	ldr	r2, [pc, #240]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <MX_GPIO_Init+0x12c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	4829      	ldr	r0, [pc, #164]	; (8001f78 <MX_GPIO_Init+0x130>)
 8001ed4:	f000 fdb4 	bl	8002a40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2140      	movs	r1, #64	; 0x40
 8001edc:	4827      	ldr	r0, [pc, #156]	; (8001f7c <MX_GPIO_Init+0x134>)
 8001ede:	f000 fdaf 	bl	8002a40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ee8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481f      	ldr	r0, [pc, #124]	; (8001f78 <MX_GPIO_Init+0x130>)
 8001efa:	f000 fc05 	bl	8002708 <HAL_GPIO_Init>

	/*Configure GPIO pins : RIGHT_Pin DOWN_Pin */
	GPIO_InitStruct.Pin = RIGHT_Pin | DOWN_Pin;
 8001efe:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001f02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	481a      	ldr	r0, [pc, #104]	; (8001f7c <MX_GPIO_Init+0x134>)
 8001f14:	f000 fbf8 	bl	8002708 <HAL_GPIO_Init>

	/*Configure GPIO pin : DC_Pin */
	GPIO_InitStruct.Pin = DC_Pin;
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4812      	ldr	r0, [pc, #72]	; (8001f78 <MX_GPIO_Init+0x130>)
 8001f30:	f000 fbea 	bl	8002708 <HAL_GPIO_Init>

	/*Configure GPIO pins : LEFT_Pin UP_Pin */
	GPIO_InitStruct.Pin = LEFT_Pin | UP_Pin;
 8001f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_GPIO_Init+0x138>)
 8001f4a:	f000 fbdd 	bl	8002708 <HAL_GPIO_Init>

	/*Configure GPIO pin : RES_Pin */
	GPIO_InitStruct.Pin = RES_Pin;
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_GPIO_Init+0x134>)
 8001f66:	f000 fbcf 	bl	8002708 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020000 	.word	0x40020000

08001f84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f8c:	e7fe      	b.n	8001f8c <Error_Handler+0x8>
	...

08001f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fce:	2007      	movs	r0, #7
 8001fd0:	f000 fb66 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_SPI_MspInit+0x84>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12b      	bne.n	800205a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_SPI_MspInit+0x88>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_SPI_MspInit+0x88>)
 800200c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_SPI_MspInit+0x88>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_SPI_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_SPI_MspInit+0x88>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_SPI_MspInit+0x88>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
 800203a:	2328      	movs	r3, #40	; 0x28
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204a:	2305      	movs	r3, #5
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_SPI_MspInit+0x8c>)
 8002056:	f000 fb57 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40013000 	.word	0x40013000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <HAL_TIM_Base_MspInit+0x3c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10d      	bne.n	800209e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_TIM_Base_MspInit+0x40>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_TIM_Base_MspInit+0x40>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_TIM_Base_MspInit+0x40>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_TIM_MspPostInit+0x68>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d11e      	bne.n	8002114 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_TIM_MspPostInit+0x6c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_TIM_MspPostInit+0x6c>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_TIM_MspPostInit+0x6c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80020f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002104:	2301      	movs	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	4619      	mov	r1, r3
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_TIM_MspPostInit+0x70>)
 8002110:	f000 fafa 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40010000 	.word	0x40010000
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_UART_MspInit+0x84>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12b      	bne.n	80021a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_UART_MspInit+0x88>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_UART_MspInit+0x88>)
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_UART_MspInit+0x88>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_UART_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_UART_MspInit+0x88>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_UART_MspInit+0x88>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002182:	230c      	movs	r3, #12
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002192:	2307      	movs	r3, #7
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_UART_MspInit+0x8c>)
 800219e:	f000 fab3 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	; 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40004400 	.word	0x40004400
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002204:	f000 f956 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_kill>:

int _kill(int pid, int sig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002226:	f002 ff19 	bl	800505c <__errno>
 800222a:	4603      	mov	r3, r0
 800222c:	2216      	movs	r2, #22
 800222e:	601a      	str	r2, [r3, #0]
  return -1;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_exit>:

void _exit (int status)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffe7 	bl	800221c <_kill>
  while (1) {}    /* Make sure we hang here */
 800224e:	e7fe      	b.n	800224e <_exit+0x12>

08002250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	e00a      	b.n	8002278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002262:	f3af 8000 	nop.w
 8002266:	4601      	mov	r1, r0
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	60ba      	str	r2, [r7, #8]
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	dbf0      	blt.n	8002262 <_read+0x12>
  }

  return len;
 8002280:	687b      	ldr	r3, [r7, #4]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e009      	b.n	80022b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbf1      	blt.n	800229c <_write+0x12>
  }
  return len;
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_close>:

int _close(int file)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ea:	605a      	str	r2, [r3, #4]
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_isatty>:

int _isatty(int file)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <_sbrk+0x5c>)
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <_sbrk+0x60>)
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <_sbrk+0x64>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <_sbrk+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800235c:	f002 fe7e 	bl	800505c <__errno>
 8002360:	4603      	mov	r3, r0
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	e009      	b.n	8002380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_sbrk+0x64>)
 800237c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20018000 	.word	0x20018000
 800238c:	00000400 	.word	0x00000400
 8002390:	200003dc 	.word	0x200003dc
 8002394:	20000530 	.word	0x20000530

08002398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <SystemInit+0x20>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <SystemInit+0x20>)
 80023a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023c0:	f7ff ffea 	bl	8002398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023dc:	4c0a      	ldr	r4, [pc, #40]	; (8002408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80023ea:	f002 fe3d 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ee:	f7ff fb3f 	bl	8001a70 <main>
  bx  lr    
 80023f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8002400:	080066bc 	.word	0x080066bc
  ldr r2, =_sbss
 8002404:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8002408:	20000530 	.word	0x20000530

0800240c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC_IRQHandler>
	...

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_Init+0x40>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_Init+0x40>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x40>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f931 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fda4 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f93b 	bl	80026ee <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f911 	bl	80026b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000214 	.word	0x20000214
 80024ac:	2000021c 	.word	0x2000021c
 80024b0:	20000218 	.word	0x20000218

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2000021c 	.word	0x2000021c
 80024d8:	200003e0 	.word	0x200003e0

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200003e0 	.word	0x200003e0

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000021c 	.word	0x2000021c

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	; (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f7ff ff8e 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff47 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c8:	f7ff ff5c 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff8e 	bl	80025f4 <NVIC_EncodePriority>
 80026d8:	4602      	mov	r2, r0
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff5d 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffb0 	bl	800265c <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	e159      	b.n	80029d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 8148 	bne.w	80029d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d005      	beq.n	800275a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	2b02      	cmp	r3, #2
 8002758:	d130      	bne.n	80027bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 0201 	and.w	r2, r3, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d017      	beq.n	80027f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d123      	bne.n	800284c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80a2 	beq.w	80029d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b57      	ldr	r3, [pc, #348]	; (80029f0 <HAL_GPIO_Init+0x2e8>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_GPIO_Init+0x2e8>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <HAL_GPIO_Init+0x2e8>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_GPIO_Init+0x2ec>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a49      	ldr	r2, [pc, #292]	; (80029f8 <HAL_GPIO_Init+0x2f0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x202>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a48      	ldr	r2, [pc, #288]	; (80029fc <HAL_GPIO_Init+0x2f4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x1fe>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_GPIO_Init+0x2f8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a46      	ldr	r2, [pc, #280]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x1f6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <HAL_GPIO_Init+0x300>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x1f2>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x204>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x204>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x204>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x204>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x204>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x2ec>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_GPIO_Init+0x304>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <HAL_GPIO_Init+0x304>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_GPIO_Init+0x304>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_GPIO_Init+0x304>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_GPIO_Init+0x304>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a2:	4a1a      	ldr	r2, [pc, #104]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f aea2 	bls.w	8002724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40013c00 	.word	0x40013c00

08002a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	e001      	b.n	8002a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e267      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d075      	beq.n	8002b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a92:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d112      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aaa:	4b82      	ldr	r3, [pc, #520]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	4b7e      	ldr	r3, [pc, #504]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x108>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d157      	bne.n	8002b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e242      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x74>
 8002ada:	4b76      	ldr	r3, [pc, #472]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a75      	ldr	r2, [pc, #468]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x98>
 8002af2:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6f      	ldr	r2, [pc, #444]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6c      	ldr	r2, [pc, #432]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xb0>
 8002b0c:	4b69      	ldr	r3, [pc, #420]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a68      	ldr	r2, [pc, #416]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a65      	ldr	r2, [pc, #404]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fcd6 	bl	80024dc <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff fcd2 	bl	80024dc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e207      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0xc0>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff fcc2 	bl	80024dc <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7ff fcbe 	bl	80024dc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1f3      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0xe8>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d063      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d11c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x152>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1c7      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4937      	ldr	r1, [pc, #220]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	e03a      	b.n	8002c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_OscConfig+0x244>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7ff fc77 	bl	80024dc <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7ff fc73 	bl	80024dc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1a8      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4925      	ldr	r1, [pc, #148]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
 8002c24:	e015      	b.n	8002c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_OscConfig+0x244>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fc56 	bl	80024dc <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c34:	f7ff fc52 	bl	80024dc <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e187      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d036      	beq.n	8002ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_RCC_OscConfig+0x248>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7ff fc36 	bl	80024dc <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c74:	f7ff fc32 	bl	80024dc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e167      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x200>
 8002c92:	e01b      	b.n	8002ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_OscConfig+0x248>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7ff fc1f 	bl	80024dc <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	e00e      	b.n	8002cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca2:	f7ff fc1b 	bl	80024dc <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d907      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e150      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	42470000 	.word	0x42470000
 8002cbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ea      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8097 	beq.w	8002e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cde:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a7c      	ldr	r2, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfa:	4b7a      	ldr	r3, [pc, #488]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x474>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d118      	bne.n	8002d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d16:	4b74      	ldr	r3, [pc, #464]	; (8002ee8 <HAL_RCC_OscConfig+0x474>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a73      	ldr	r2, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x474>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7ff fbdb 	bl	80024dc <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7ff fbd7 	bl	80024dc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e10c      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x474>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2ea>
 8002d50:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a63      	ldr	r2, [pc, #396]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCC_OscConfig+0x324>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x30c>
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a5e      	ldr	r2, [pc, #376]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a5b      	ldr	r2, [pc, #364]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0x324>
 8002d80:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a57      	ldr	r2, [pc, #348]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8c:	4b55      	ldr	r3, [pc, #340]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a54      	ldr	r2, [pc, #336]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7ff fb9c 	bl	80024dc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7ff fb98 	bl	80024dc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e0cb      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ee      	beq.n	8002da8 <HAL_RCC_OscConfig+0x334>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dcc:	f7ff fb86 	bl	80024dc <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7ff fb82 	bl	80024dc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0b5      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dea:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ee      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a1 	beq.w	8002f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e12:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d05c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d141      	bne.n	8002eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b31      	ldr	r3, [pc, #196]	; (8002eec <HAL_RCC_OscConfig+0x478>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7ff fb56 	bl	80024dc <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7ff fb52 	bl	80024dc <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e087      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	491b      	ldr	r1, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x478>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7ff fb2b 	bl	80024dc <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7ff fb27 	bl	80024dc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e05c      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x416>
 8002ea8:	e054      	b.n	8002f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_OscConfig+0x478>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fb14 	bl	80024dc <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff fb10 	bl	80024dc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e045      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x444>
 8002ed6:	e03d      	b.n	8002f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e038      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_RCC_OscConfig+0x4ec>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d028      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d121      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d11a      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f20:	4013      	ands	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d111      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800

08002f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0cc      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d90c      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b65      	ldr	r3, [pc, #404]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b8      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	494d      	ldr	r1, [pc, #308]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d044      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d119      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e07f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d003      	beq.n	8003022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301e:	2b03      	cmp	r3, #3
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e067      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4934      	ldr	r1, [pc, #208]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7ff fa42 	bl	80024dc <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7ff fa3e 	bl	80024dc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e04f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d20c      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e032      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	490e      	ldr	r1, [pc, #56]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ea:	f000 f821 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	490a      	ldr	r1, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	5ccb      	ldrb	r3, [r1, r3]
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f9a2 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023c00 	.word	0x40023c00
 8003120:	40023800 	.word	0x40023800
 8003124:	080065b4 	.word	0x080065b4
 8003128:	20000214 	.word	0x20000214
 800312c:	20000218 	.word	0x20000218

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003134:	b094      	sub	sp, #80	; 0x50
 8003136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	647b      	str	r3, [r7, #68]	; 0x44
 800313c:	2300      	movs	r3, #0
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003140:	2300      	movs	r3, #0
 8003142:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003148:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCC_GetSysClockFreq+0x200>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d00d      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x40>
 8003154:	2b08      	cmp	r3, #8
 8003156:	f200 80e1 	bhi.w	800331c <HAL_RCC_GetSysClockFreq+0x1ec>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x34>
 800315e:	2b04      	cmp	r3, #4
 8003160:	d003      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x3a>
 8003162:	e0db      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_GetSysClockFreq+0x204>)
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003168:	e0db      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800316a:	4b73      	ldr	r3, [pc, #460]	; (8003338 <HAL_RCC_GetSysClockFreq+0x208>)
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800316e:	e0d8      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003170:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCC_GetSysClockFreq+0x200>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003178:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800317a:	4b6d      	ldr	r3, [pc, #436]	; (8003330 <HAL_RCC_GetSysClockFreq+0x200>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d063      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <HAL_RCC_GetSysClockFreq+0x200>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	2200      	movs	r2, #0
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003198:	633b      	str	r3, [r7, #48]	; 0x30
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
 800319e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031a2:	4622      	mov	r2, r4
 80031a4:	462b      	mov	r3, r5
 80031a6:	f04f 0000 	mov.w	r0, #0
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	0159      	lsls	r1, r3, #5
 80031b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b4:	0150      	lsls	r0, r2, #5
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4621      	mov	r1, r4
 80031bc:	1a51      	subs	r1, r2, r1
 80031be:	6139      	str	r1, [r7, #16]
 80031c0:	4629      	mov	r1, r5
 80031c2:	eb63 0301 	sbc.w	r3, r3, r1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d4:	4659      	mov	r1, fp
 80031d6:	018b      	lsls	r3, r1, #6
 80031d8:	4651      	mov	r1, sl
 80031da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031de:	4651      	mov	r1, sl
 80031e0:	018a      	lsls	r2, r1, #6
 80031e2:	4651      	mov	r1, sl
 80031e4:	ebb2 0801 	subs.w	r8, r2, r1
 80031e8:	4659      	mov	r1, fp
 80031ea:	eb63 0901 	sbc.w	r9, r3, r1
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003202:	4690      	mov	r8, r2
 8003204:	4699      	mov	r9, r3
 8003206:	4623      	mov	r3, r4
 8003208:	eb18 0303 	adds.w	r3, r8, r3
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	462b      	mov	r3, r5
 8003210:	eb49 0303 	adc.w	r3, r9, r3
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003222:	4629      	mov	r1, r5
 8003224:	024b      	lsls	r3, r1, #9
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800322c:	4621      	mov	r1, r4
 800322e:	024a      	lsls	r2, r1, #9
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003236:	2200      	movs	r2, #0
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
 800323a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800323c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003240:	f7fd f9da 	bl	80005f8 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800324c:	e058      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_RCC_GetSysClockFreq+0x200>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	2200      	movs	r2, #0
 8003256:	4618      	mov	r0, r3
 8003258:	4611      	mov	r1, r2
 800325a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	f04f 0000 	mov.w	r0, #0
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	0159      	lsls	r1, r3, #5
 8003276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327a:	0150      	lsls	r0, r2, #5
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4641      	mov	r1, r8
 8003282:	ebb2 0a01 	subs.w	sl, r2, r1
 8003286:	4649      	mov	r1, r9
 8003288:	eb63 0b01 	sbc.w	fp, r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800329c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032a0:	ebb2 040a 	subs.w	r4, r2, sl
 80032a4:	eb63 050b 	sbc.w	r5, r3, fp
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	00eb      	lsls	r3, r5, #3
 80032b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b6:	00e2      	lsls	r2, r4, #3
 80032b8:	4614      	mov	r4, r2
 80032ba:	461d      	mov	r5, r3
 80032bc:	4643      	mov	r3, r8
 80032be:	18e3      	adds	r3, r4, r3
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	464b      	mov	r3, r9
 80032c4:	eb45 0303 	adc.w	r3, r5, r3
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032d6:	4629      	mov	r1, r5
 80032d8:	028b      	lsls	r3, r1, #10
 80032da:	4621      	mov	r1, r4
 80032dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e0:	4621      	mov	r1, r4
 80032e2:	028a      	lsls	r2, r1, #10
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ea:	2200      	movs	r2, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	61fa      	str	r2, [r7, #28]
 80032f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f4:	f7fd f980 	bl	80005f8 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4613      	mov	r3, r2
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_GetSysClockFreq+0x200>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetSysClockFreq+0x204>)
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003324:	4618      	mov	r0, r3
 8003326:	3750      	adds	r7, #80	; 0x50
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	00f42400 	.word	0x00f42400
 8003338:	007a1200 	.word	0x007a1200

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_RCC_GetHCLKFreq+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000214 	.word	0x20000214

08003354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003358:	f7ff fff0 	bl	800333c <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0a9b      	lsrs	r3, r3, #10
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40023800 	.word	0x40023800
 8003378:	080065c4 	.word	0x080065c4

0800337c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003380:	f7ff ffdc 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0b5b      	lsrs	r3, r3, #13
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	080065c4 	.word	0x080065c4

080033a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e07b      	b.n	80034ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d108      	bne.n	80033d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c6:	d009      	beq.n	80033dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
 80033ce:	e005      	b.n	80033dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fdf2 	bl	8001fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	ea42 0103 	orr.w	r1, r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 0104 	and.w	r1, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f003 0210 	and.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_SPI_Transmit+0x22>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e12d      	b.n	8003734 <HAL_SPI_Transmit+0x27e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e0:	f7fe fffc 	bl	80024dc <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034fa:	e116      	b.n	800372a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Transmit+0x52>
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800350c:	e10d      	b.n	800372a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2203      	movs	r2, #3
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003554:	d10f      	bne.n	8003576 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d007      	beq.n	8003594 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359c:	d14f      	bne.n	800363e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Transmit+0xf6>
 80035a6:	8afb      	ldrh	r3, [r7, #22]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d142      	bne.n	8003632 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035d0:	e02f      	b.n	8003632 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d112      	bne.n	8003606 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	881a      	ldrh	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	86da      	strh	r2, [r3, #54]	; 0x36
 8003604:	e015      	b.n	8003632 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003606:	f7fe ff69 	bl	80024dc <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d803      	bhi.n	800361e <HAL_SPI_Transmit+0x168>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d102      	bne.n	8003624 <HAL_SPI_Transmit+0x16e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003630:	e07b      	b.n	800372a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ca      	bne.n	80035d2 <HAL_SPI_Transmit+0x11c>
 800363c:	e050      	b.n	80036e0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_Transmit+0x196>
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d144      	bne.n	80036d6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003672:	e030      	b.n	80036d6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d113      	bne.n	80036aa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a8:	e015      	b.n	80036d6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036aa:	f7fe ff17 	bl	80024dc <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d803      	bhi.n	80036c2 <HAL_SPI_Transmit+0x20c>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_Transmit+0x212>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036d4:	e029      	b.n	800372a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1c9      	bne.n	8003674 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8b1 	bl	800384c <SPI_EndRxTxTransaction>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e003      	b.n	800372a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003732:	7ffb      	ldrb	r3, [r7, #31]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800374c:	f7fe fec6 	bl	80024dc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4413      	add	r3, r2
 800375a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800375c:	f7fe febe 	bl	80024dc <HAL_GetTick>
 8003760:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	0d1b      	lsrs	r3, r3, #20
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003772:	e054      	b.n	800381e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d050      	beq.n	800381e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800377c:	f7fe feae 	bl	80024dc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	d902      	bls.n	8003792 <SPI_WaitFlagStateUntilTimeout+0x56>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d13d      	bne.n	800380e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037aa:	d111      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b4:	d004      	beq.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d107      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d10f      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e017      	b.n	800383e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3b01      	subs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	429a      	cmp	r2, r3
 800383a:	d19b      	bne.n	8003774 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000214 	.word	0x20000214

0800384c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2201      	movs	r2, #1
 8003860:	2102      	movs	r1, #2
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff6a 	bl	800373c <SPI_WaitFlagStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e032      	b.n	80038e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800387e:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <SPI_EndRxTxTransaction+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <SPI_EndRxTxTransaction+0xa4>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	0d5b      	lsrs	r3, r3, #21
 800388a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389c:	d112      	bne.n	80038c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff ff47 	bl	800373c <SPI_WaitFlagStateUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d016      	beq.n	80038e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e00f      	b.n	80038e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d0f2      	beq.n	80038c4 <SPI_EndRxTxTransaction+0x78>
 80038de:	e000      	b.n	80038e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80038e0:	bf00      	nop
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000214 	.word	0x20000214
 80038f0:	165e9f81 	.word	0x165e9f81

080038f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e041      	b.n	800398a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fe fba8 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4610      	mov	r0, r2
 8003934:	f000 fac0 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e041      	b.n	8003a28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f839 	bl	8003a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f000 fa71 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_TIM_PWM_Start+0x24>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e022      	b.n	8003aae <HAL_TIM_PWM_Start+0x6a>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d109      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x3e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e015      	b.n	8003aae <HAL_TIM_PWM_Start+0x6a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x58>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e008      	b.n	8003aae <HAL_TIM_PWM_Start+0x6a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e068      	b.n	8003b88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0x82>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac4:	e013      	b.n	8003aee <HAL_TIM_PWM_Start+0xaa>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x92>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	e00b      	b.n	8003aee <HAL_TIM_PWM_Start+0xaa>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xa2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	e003      	b.n	8003aee <HAL_TIM_PWM_Start+0xaa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc90 	bl	800441c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <HAL_TIM_PWM_Start+0x14c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_TIM_PWM_Start+0x14c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d013      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_TIM_PWM_Start+0x150>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_TIM_PWM_Start+0x154>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_TIM_PWM_Start+0x158>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x10e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_TIM_PWM_Start+0x15c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d010      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40014000 	.word	0x40014000

08003ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0ae      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f200 809f 	bhi.w	8003d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003d11 	.word	0x08003d11
 8003be0:	08003d11 	.word	0x08003d11
 8003be4:	08003d11 	.word	0x08003d11
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003d11 	.word	0x08003d11
 8003bf0:	08003d11 	.word	0x08003d11
 8003bf4:	08003d11 	.word	0x08003d11
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003d11 	.word	0x08003d11
 8003c00:	08003d11 	.word	0x08003d11
 8003c04:	08003d11 	.word	0x08003d11
 8003c08:	08003ccf 	.word	0x08003ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f9dc 	bl	8003fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0208 	orr.w	r2, r2, #8
 8003c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0204 	bic.w	r2, r2, #4
 8003c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6999      	ldr	r1, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	619a      	str	r2, [r3, #24]
      break;
 8003c4a:	e064      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa22 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
      break;
 8003c8c:	e043      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fa6d 	bl	8004174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0208 	orr.w	r2, r2, #8
 8003ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0204 	bic.w	r2, r2, #4
 8003cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
      break;
 8003ccc:	e023      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fab7 	bl	8004248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	021a      	lsls	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      break;
 8003d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0b4      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x186>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d03e      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xd4>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	f200 8087 	bhi.w	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	f000 8086 	beq.w	8003e9a <HAL_TIM_ConfigClockSource+0x172>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d87f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d01a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xa6>
 8003d98:	2b70      	cmp	r3, #112	; 0x70
 8003d9a:	d87b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d050      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x11a>
 8003da0:	2b60      	cmp	r3, #96	; 0x60
 8003da2:	d877      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b50      	cmp	r3, #80	; 0x50
 8003da6:	d03c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0xfa>
 8003da8:	2b50      	cmp	r3, #80	; 0x50
 8003daa:	d873      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d058      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x13a>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d86f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d064      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003db8:	2b30      	cmp	r3, #48	; 0x30
 8003dba:	d86b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d060      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d867      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d05a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	e062      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dde:	f000 fafd 	bl	80043dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e04f      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e0c:	f000 fae6 	bl	80043dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1e:	609a      	str	r2, [r3, #8]
      break;
 8003e20:	e03c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fa5a 	bl	80042e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2150      	movs	r1, #80	; 0x50
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fab3 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e02c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fa79 	bl	8004346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2160      	movs	r1, #96	; 0x60
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 faa3 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e01c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 fa3a 	bl	80042e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa93 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 fa8a 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8003e92:	e003      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	e000      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <TIM_Base_SetConfig+0xfc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a37      	ldr	r2, [pc, #220]	; (8003fb8 <TIM_Base_SetConfig+0x100>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a36      	ldr	r2, [pc, #216]	; (8003fbc <TIM_Base_SetConfig+0x104>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a35      	ldr	r2, [pc, #212]	; (8003fc0 <TIM_Base_SetConfig+0x108>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d108      	bne.n	8003f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <TIM_Base_SetConfig+0xfc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <TIM_Base_SetConfig+0x100>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <TIM_Base_SetConfig+0x104>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <TIM_Base_SetConfig+0x108>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <TIM_Base_SetConfig+0x10c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <TIM_Base_SetConfig+0x110>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <TIM_Base_SetConfig+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <TIM_Base_SetConfig+0xfc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f023 0201 	bic.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10c      	bne.n	8004046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0308 	bic.w	r3, r3, #8
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40010000 	.word	0x40010000

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f023 0210 	bic.w	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d113      	bne.n	8004148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000

08004174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d113      	bne.n	800421e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010000 	.word	0x40010000

08004248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <TIM_OC4_SetConfig+0x9c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000

080042e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004346:	b480      	push	{r7}
 8004348:	b087      	sub	sp, #28
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 0210 	bic.w	r2, r3, #16
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	031b      	lsls	r3, r3, #12
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f043 0307 	orr.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	431a      	orrs	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4313      	orrs	r3, r2
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2201      	movs	r2, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1a      	ldr	r2, [r3, #32]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e050      	b.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d013      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a16      	ldr	r2, [pc, #88]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10c      	bne.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40014000 	.word	0x40014000

08004544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e03d      	b.n	80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e042      	b.n	8004680 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fd fd8a 	bl	8002128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f82b 	bl	8004688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b0c0      	sub	sp, #256	; 0x100
 800468e:	af00      	add	r7, sp, #0
 8004690:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	68d9      	ldr	r1, [r3, #12]
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	ea40 0301 	orr.w	r3, r0, r1
 80046b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046e0:	f021 010c 	bic.w	r1, r1, #12
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ee:	430b      	orrs	r3, r1
 80046f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	6999      	ldr	r1, [r3, #24]
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	ea40 0301 	orr.w	r3, r0, r1
 800470e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b8f      	ldr	r3, [pc, #572]	; (8004954 <UART_SetConfig+0x2cc>)
 8004718:	429a      	cmp	r2, r3
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0xa0>
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8d      	ldr	r3, [pc, #564]	; (8004958 <UART_SetConfig+0x2d0>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d104      	bne.n	8004732 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fe28 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 800472c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004730:	e003      	b.n	800473a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe fe0f 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 8004736:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	f040 810c 	bne.w	8004960 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004752:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004756:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	1891      	adds	r1, r2, r2
 8004760:	65b9      	str	r1, [r7, #88]	; 0x58
 8004762:	415b      	adcs	r3, r3
 8004764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800476a:	4621      	mov	r1, r4
 800476c:	eb12 0801 	adds.w	r8, r2, r1
 8004770:	4629      	mov	r1, r5
 8004772:	eb43 0901 	adc.w	r9, r3, r1
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478a:	4690      	mov	r8, r2
 800478c:	4699      	mov	r9, r3
 800478e:	4623      	mov	r3, r4
 8004790:	eb18 0303 	adds.w	r3, r8, r3
 8004794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004798:	462b      	mov	r3, r5
 800479a:	eb49 0303 	adc.w	r3, r9, r3
 800479e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047b6:	460b      	mov	r3, r1
 80047b8:	18db      	adds	r3, r3, r3
 80047ba:	653b      	str	r3, [r7, #80]	; 0x50
 80047bc:	4613      	mov	r3, r2
 80047be:	eb42 0303 	adc.w	r3, r2, r3
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
 80047c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <UART_SetConfig+0x2d4>)
 80047d6:	fba3 2302 	umull	r2, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	011c      	lsls	r4, r3, #4
 80047de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047f8:	415b      	adcs	r3, r3
 80047fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004800:	4641      	mov	r1, r8
 8004802:	eb12 0a01 	adds.w	sl, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0b01 	adc.w	fp, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004818:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800481c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004820:	4692      	mov	sl, r2
 8004822:	469b      	mov	fp, r3
 8004824:	4643      	mov	r3, r8
 8004826:	eb1a 0303 	adds.w	r3, sl, r3
 800482a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800482e:	464b      	mov	r3, r9
 8004830:	eb4b 0303 	adc.w	r3, fp, r3
 8004834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004844:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004848:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800484c:	460b      	mov	r3, r1
 800484e:	18db      	adds	r3, r3, r3
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
 8004852:	4613      	mov	r3, r2
 8004854:	eb42 0303 	adc.w	r3, r2, r3
 8004858:	647b      	str	r3, [r7, #68]	; 0x44
 800485a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800485e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004862:	f7fb fec9 	bl	80005f8 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4611      	mov	r1, r2
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <UART_SetConfig+0x2d4>)
 800486e:	fba3 2301 	umull	r2, r3, r3, r1
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2264      	movs	r2, #100	; 0x64
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	1acb      	subs	r3, r1, r3
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <UART_SetConfig+0x2d4>)
 8004884:	fba3 2302 	umull	r2, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004890:	441c      	add	r4, r3
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800489c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048ac:	415b      	adcs	r3, r3
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b4:	4641      	mov	r1, r8
 80048b6:	1851      	adds	r1, r2, r1
 80048b8:	6339      	str	r1, [r7, #48]	; 0x30
 80048ba:	4649      	mov	r1, r9
 80048bc:	414b      	adcs	r3, r1
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048cc:	4659      	mov	r1, fp
 80048ce:	00cb      	lsls	r3, r1, #3
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d6:	4651      	mov	r1, sl
 80048d8:	00ca      	lsls	r2, r1, #3
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	4642      	mov	r2, r8
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e8:	464b      	mov	r3, r9
 80048ea:	460a      	mov	r2, r1
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004900:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800491a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800491e:	f7fb fe6b 	bl	80005f8 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <UART_SetConfig+0x2d4>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <UART_SetConfig+0x2d4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 0207 	and.w	r2, r3, #7
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4422      	add	r2, r4
 800494e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004950:	e106      	b.n	8004b60 <UART_SetConfig+0x4d8>
 8004952:	bf00      	nop
 8004954:	40011000 	.word	0x40011000
 8004958:	40011400 	.word	0x40011400
 800495c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800496a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800496e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	1891      	adds	r1, r2, r2
 8004978:	6239      	str	r1, [r7, #32]
 800497a:	415b      	adcs	r3, r3
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004982:	4641      	mov	r1, r8
 8004984:	1854      	adds	r4, r2, r1
 8004986:	4649      	mov	r1, r9
 8004988:	eb43 0501 	adc.w	r5, r3, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	00eb      	lsls	r3, r5, #3
 8004996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499a:	00e2      	lsls	r2, r4, #3
 800499c:	4614      	mov	r4, r2
 800499e:	461d      	mov	r5, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	18e3      	adds	r3, r4, r3
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049a8:	464b      	mov	r3, r9
 80049aa:	eb45 0303 	adc.w	r3, r5, r3
 80049ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ce:	4629      	mov	r1, r5
 80049d0:	008b      	lsls	r3, r1, #2
 80049d2:	4621      	mov	r1, r4
 80049d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d8:	4621      	mov	r1, r4
 80049da:	008a      	lsls	r2, r1, #2
 80049dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049e0:	f7fb fe0a 	bl	80005f8 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <UART_SetConfig+0x4e4>)
 80049ea:	fba3 2302 	umull	r2, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	011c      	lsls	r4, r3, #4
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	61b9      	str	r1, [r7, #24]
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a14:	4641      	mov	r1, r8
 8004a16:	1851      	adds	r1, r2, r1
 8004a18:	6139      	str	r1, [r7, #16]
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	00cb      	lsls	r3, r1, #3
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a36:	4651      	mov	r1, sl
 8004a38:	00ca      	lsls	r2, r1, #3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4642      	mov	r2, r8
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	008b      	lsls	r3, r1, #2
 8004a70:	4641      	mov	r1, r8
 8004a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a76:	4641      	mov	r1, r8
 8004a78:	008a      	lsls	r2, r1, #2
 8004a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a7e:	f7fb fdbb 	bl	80005f8 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2264      	movs	r2, #100	; 0x64
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	1acb      	subs	r3, r1, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	3332      	adds	r3, #50	; 0x32
 8004a9c:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa8:	441c      	add	r4, r3
 8004aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aae:	2200      	movs	r2, #0
 8004ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab2:	677a      	str	r2, [r7, #116]	; 0x74
 8004ab4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	1891      	adds	r1, r2, r2
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	415b      	adcs	r3, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac8:	4641      	mov	r1, r8
 8004aca:	1851      	adds	r1, r2, r1
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	4649      	mov	r1, r9
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	00cb      	lsls	r3, r1, #3
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aea:	4651      	mov	r1, sl
 8004aec:	00ca      	lsls	r2, r1, #3
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	4642      	mov	r2, r8
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004afa:	464b      	mov	r3, r9
 8004afc:	460a      	mov	r2, r1
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0e:	667a      	str	r2, [r7, #100]	; 0x64
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	008b      	lsls	r3, r1, #2
 8004b20:	4641      	mov	r1, r8
 8004b22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b26:	4641      	mov	r1, r8
 8004b28:	008a      	lsls	r2, r1, #2
 8004b2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b2e:	f7fb fd63 	bl	80005f8 <__aeabi_uldivmod>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004b38:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	2164      	movs	r1, #100	; 0x64
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	3332      	adds	r3, #50	; 0x32
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <UART_SetConfig+0x4e4>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	f003 020f 	and.w	r2, r3, #15
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4422      	add	r2, r4
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b66:	46bd      	mov	sp, r7
 8004b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6c:	51eb851f 	.word	0x51eb851f

08004b70 <malloc>:
 8004b70:	4b02      	ldr	r3, [pc, #8]	; (8004b7c <malloc+0xc>)
 8004b72:	4601      	mov	r1, r0
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f000 b823 	b.w	8004bc0 <_malloc_r>
 8004b7a:	bf00      	nop
 8004b7c:	20000278 	.word	0x20000278

08004b80 <sbrk_aligned>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4e0e      	ldr	r6, [pc, #56]	; (8004bbc <sbrk_aligned+0x3c>)
 8004b84:	460c      	mov	r4, r1
 8004b86:	6831      	ldr	r1, [r6, #0]
 8004b88:	4605      	mov	r5, r0
 8004b8a:	b911      	cbnz	r1, 8004b92 <sbrk_aligned+0x12>
 8004b8c:	f000 fa44 	bl	8005018 <_sbrk_r>
 8004b90:	6030      	str	r0, [r6, #0]
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 fa3f 	bl	8005018 <_sbrk_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d00a      	beq.n	8004bb4 <sbrk_aligned+0x34>
 8004b9e:	1cc4      	adds	r4, r0, #3
 8004ba0:	f024 0403 	bic.w	r4, r4, #3
 8004ba4:	42a0      	cmp	r0, r4
 8004ba6:	d007      	beq.n	8004bb8 <sbrk_aligned+0x38>
 8004ba8:	1a21      	subs	r1, r4, r0
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 fa34 	bl	8005018 <_sbrk_r>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d101      	bne.n	8004bb8 <sbrk_aligned+0x38>
 8004bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8004bb8:	4620      	mov	r0, r4
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	200003e8 	.word	0x200003e8

08004bc0 <_malloc_r>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	1ccd      	adds	r5, r1, #3
 8004bc6:	f025 0503 	bic.w	r5, r5, #3
 8004bca:	3508      	adds	r5, #8
 8004bcc:	2d0c      	cmp	r5, #12
 8004bce:	bf38      	it	cc
 8004bd0:	250c      	movcc	r5, #12
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	db01      	blt.n	8004bdc <_malloc_r+0x1c>
 8004bd8:	42a9      	cmp	r1, r5
 8004bda:	d905      	bls.n	8004be8 <_malloc_r+0x28>
 8004bdc:	230c      	movs	r3, #12
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	2600      	movs	r6, #0
 8004be2:	4630      	mov	r0, r6
 8004be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004cbc <_malloc_r+0xfc>
 8004bec:	f000 f868 	bl	8004cc0 <__malloc_lock>
 8004bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf4:	461c      	mov	r4, r3
 8004bf6:	bb5c      	cbnz	r4, 8004c50 <_malloc_r+0x90>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f7ff ffc0 	bl	8004b80 <sbrk_aligned>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	4604      	mov	r4, r0
 8004c04:	d155      	bne.n	8004cb2 <_malloc_r+0xf2>
 8004c06:	f8d8 4000 	ldr.w	r4, [r8]
 8004c0a:	4626      	mov	r6, r4
 8004c0c:	2e00      	cmp	r6, #0
 8004c0e:	d145      	bne.n	8004c9c <_malloc_r+0xdc>
 8004c10:	2c00      	cmp	r4, #0
 8004c12:	d048      	beq.n	8004ca6 <_malloc_r+0xe6>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	4631      	mov	r1, r6
 8004c18:	4638      	mov	r0, r7
 8004c1a:	eb04 0903 	add.w	r9, r4, r3
 8004c1e:	f000 f9fb 	bl	8005018 <_sbrk_r>
 8004c22:	4581      	cmp	r9, r0
 8004c24:	d13f      	bne.n	8004ca6 <_malloc_r+0xe6>
 8004c26:	6821      	ldr	r1, [r4, #0]
 8004c28:	1a6d      	subs	r5, r5, r1
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	f7ff ffa7 	bl	8004b80 <sbrk_aligned>
 8004c32:	3001      	adds	r0, #1
 8004c34:	d037      	beq.n	8004ca6 <_malloc_r+0xe6>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	442b      	add	r3, r5
 8004c3a:	6023      	str	r3, [r4, #0]
 8004c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d038      	beq.n	8004cb6 <_malloc_r+0xf6>
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	42a2      	cmp	r2, r4
 8004c48:	d12b      	bne.n	8004ca2 <_malloc_r+0xe2>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	e00f      	b.n	8004c70 <_malloc_r+0xb0>
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	1b52      	subs	r2, r2, r5
 8004c54:	d41f      	bmi.n	8004c96 <_malloc_r+0xd6>
 8004c56:	2a0b      	cmp	r2, #11
 8004c58:	d917      	bls.n	8004c8a <_malloc_r+0xca>
 8004c5a:	1961      	adds	r1, r4, r5
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	6025      	str	r5, [r4, #0]
 8004c60:	bf18      	it	ne
 8004c62:	6059      	strne	r1, [r3, #4]
 8004c64:	6863      	ldr	r3, [r4, #4]
 8004c66:	bf08      	it	eq
 8004c68:	f8c8 1000 	streq.w	r1, [r8]
 8004c6c:	5162      	str	r2, [r4, r5]
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	4638      	mov	r0, r7
 8004c72:	f104 060b 	add.w	r6, r4, #11
 8004c76:	f000 f829 	bl	8004ccc <__malloc_unlock>
 8004c7a:	f026 0607 	bic.w	r6, r6, #7
 8004c7e:	1d23      	adds	r3, r4, #4
 8004c80:	1af2      	subs	r2, r6, r3
 8004c82:	d0ae      	beq.n	8004be2 <_malloc_r+0x22>
 8004c84:	1b9b      	subs	r3, r3, r6
 8004c86:	50a3      	str	r3, [r4, r2]
 8004c88:	e7ab      	b.n	8004be2 <_malloc_r+0x22>
 8004c8a:	42a3      	cmp	r3, r4
 8004c8c:	6862      	ldr	r2, [r4, #4]
 8004c8e:	d1dd      	bne.n	8004c4c <_malloc_r+0x8c>
 8004c90:	f8c8 2000 	str.w	r2, [r8]
 8004c94:	e7ec      	b.n	8004c70 <_malloc_r+0xb0>
 8004c96:	4623      	mov	r3, r4
 8004c98:	6864      	ldr	r4, [r4, #4]
 8004c9a:	e7ac      	b.n	8004bf6 <_malloc_r+0x36>
 8004c9c:	4634      	mov	r4, r6
 8004c9e:	6876      	ldr	r6, [r6, #4]
 8004ca0:	e7b4      	b.n	8004c0c <_malloc_r+0x4c>
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	e7cc      	b.n	8004c40 <_malloc_r+0x80>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4638      	mov	r0, r7
 8004cac:	f000 f80e 	bl	8004ccc <__malloc_unlock>
 8004cb0:	e797      	b.n	8004be2 <_malloc_r+0x22>
 8004cb2:	6025      	str	r5, [r4, #0]
 8004cb4:	e7dc      	b.n	8004c70 <_malloc_r+0xb0>
 8004cb6:	605b      	str	r3, [r3, #4]
 8004cb8:	deff      	udf	#255	; 0xff
 8004cba:	bf00      	nop
 8004cbc:	200003e4 	.word	0x200003e4

08004cc0 <__malloc_lock>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__malloc_lock+0x8>)
 8004cc2:	f000 b9f6 	b.w	80050b2 <__retarget_lock_acquire_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	2000052c 	.word	0x2000052c

08004ccc <__malloc_unlock>:
 8004ccc:	4801      	ldr	r0, [pc, #4]	; (8004cd4 <__malloc_unlock+0x8>)
 8004cce:	f000 b9f1 	b.w	80050b4 <__retarget_lock_release_recursive>
 8004cd2:	bf00      	nop
 8004cd4:	2000052c 	.word	0x2000052c

08004cd8 <rand>:
 8004cd8:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <rand+0x5c>)
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	681c      	ldr	r4, [r3, #0]
 8004cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ce0:	b9b3      	cbnz	r3, 8004d10 <rand+0x38>
 8004ce2:	2018      	movs	r0, #24
 8004ce4:	f7ff ff44 	bl	8004b70 <malloc>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6320      	str	r0, [r4, #48]	; 0x30
 8004cec:	b920      	cbnz	r0, 8004cf8 <rand+0x20>
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <rand+0x60>)
 8004cf0:	4812      	ldr	r0, [pc, #72]	; (8004d3c <rand+0x64>)
 8004cf2:	2152      	movs	r1, #82	; 0x52
 8004cf4:	f000 f9e0 	bl	80050b8 <__assert_func>
 8004cf8:	4911      	ldr	r1, [pc, #68]	; (8004d40 <rand+0x68>)
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <rand+0x6c>)
 8004cfc:	e9c0 1300 	strd	r1, r3, [r0]
 8004d00:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <rand+0x70>)
 8004d02:	6083      	str	r3, [r0, #8]
 8004d04:	230b      	movs	r3, #11
 8004d06:	8183      	strh	r3, [r0, #12]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004d10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d12:	480e      	ldr	r0, [pc, #56]	; (8004d4c <rand+0x74>)
 8004d14:	690b      	ldr	r3, [r1, #16]
 8004d16:	694c      	ldr	r4, [r1, #20]
 8004d18:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <rand+0x78>)
 8004d1a:	4358      	muls	r0, r3
 8004d1c:	fb02 0004 	mla	r0, r2, r4, r0
 8004d20:	fba3 3202 	umull	r3, r2, r3, r2
 8004d24:	3301      	adds	r3, #1
 8004d26:	eb40 0002 	adc.w	r0, r0, r2
 8004d2a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004d2e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004d32:	bd10      	pop	{r4, pc}
 8004d34:	20000278 	.word	0x20000278
 8004d38:	080065cc 	.word	0x080065cc
 8004d3c:	080065e3 	.word	0x080065e3
 8004d40:	abcd330e 	.word	0xabcd330e
 8004d44:	e66d1234 	.word	0xe66d1234
 8004d48:	0005deec 	.word	0x0005deec
 8004d4c:	5851f42d 	.word	0x5851f42d
 8004d50:	4c957f2d 	.word	0x4c957f2d

08004d54 <std>:
 8004d54:	2300      	movs	r3, #0
 8004d56:	b510      	push	{r4, lr}
 8004d58:	4604      	mov	r4, r0
 8004d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d62:	6083      	str	r3, [r0, #8]
 8004d64:	8181      	strh	r1, [r0, #12]
 8004d66:	6643      	str	r3, [r0, #100]	; 0x64
 8004d68:	81c2      	strh	r2, [r0, #14]
 8004d6a:	6183      	str	r3, [r0, #24]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	2208      	movs	r2, #8
 8004d70:	305c      	adds	r0, #92	; 0x5c
 8004d72:	f000 f914 	bl	8004f9e <memset>
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <std+0x58>)
 8004d78:	6263      	str	r3, [r4, #36]	; 0x24
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <std+0x5c>)
 8004d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <std+0x60>)
 8004d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <std+0x64>)
 8004d84:	6323      	str	r3, [r4, #48]	; 0x30
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <std+0x68>)
 8004d88:	6224      	str	r4, [r4, #32]
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d006      	beq.n	8004d9c <std+0x48>
 8004d8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d92:	4294      	cmp	r4, r2
 8004d94:	d002      	beq.n	8004d9c <std+0x48>
 8004d96:	33d0      	adds	r3, #208	; 0xd0
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d105      	bne.n	8004da8 <std+0x54>
 8004d9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da4:	f000 b984 	b.w	80050b0 <__retarget_lock_init_recursive>
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	bf00      	nop
 8004dac:	08004f19 	.word	0x08004f19
 8004db0:	08004f3b 	.word	0x08004f3b
 8004db4:	08004f73 	.word	0x08004f73
 8004db8:	08004f97 	.word	0x08004f97
 8004dbc:	200003ec 	.word	0x200003ec

08004dc0 <stdio_exit_handler>:
 8004dc0:	4a02      	ldr	r2, [pc, #8]	; (8004dcc <stdio_exit_handler+0xc>)
 8004dc2:	4903      	ldr	r1, [pc, #12]	; (8004dd0 <stdio_exit_handler+0x10>)
 8004dc4:	4803      	ldr	r0, [pc, #12]	; (8004dd4 <stdio_exit_handler+0x14>)
 8004dc6:	f000 b869 	b.w	8004e9c <_fwalk_sglue>
 8004dca:	bf00      	nop
 8004dcc:	20000220 	.word	0x20000220
 8004dd0:	08005869 	.word	0x08005869
 8004dd4:	2000022c 	.word	0x2000022c

08004dd8 <cleanup_stdio>:
 8004dd8:	6841      	ldr	r1, [r0, #4]
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <cleanup_stdio+0x34>)
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	b510      	push	{r4, lr}
 8004de0:	4604      	mov	r4, r0
 8004de2:	d001      	beq.n	8004de8 <cleanup_stdio+0x10>
 8004de4:	f000 fd40 	bl	8005868 <_fflush_r>
 8004de8:	68a1      	ldr	r1, [r4, #8]
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <cleanup_stdio+0x38>)
 8004dec:	4299      	cmp	r1, r3
 8004dee:	d002      	beq.n	8004df6 <cleanup_stdio+0x1e>
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fd39 	bl	8005868 <_fflush_r>
 8004df6:	68e1      	ldr	r1, [r4, #12]
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <cleanup_stdio+0x3c>)
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	d004      	beq.n	8004e08 <cleanup_stdio+0x30>
 8004dfe:	4620      	mov	r0, r4
 8004e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e04:	f000 bd30 	b.w	8005868 <_fflush_r>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200003ec 	.word	0x200003ec
 8004e10:	20000454 	.word	0x20000454
 8004e14:	200004bc 	.word	0x200004bc

08004e18 <global_stdio_init.part.0>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <global_stdio_init.part.0+0x30>)
 8004e1c:	4c0b      	ldr	r4, [pc, #44]	; (8004e4c <global_stdio_init.part.0+0x34>)
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <global_stdio_init.part.0+0x38>)
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	4620      	mov	r0, r4
 8004e24:	2200      	movs	r2, #0
 8004e26:	2104      	movs	r1, #4
 8004e28:	f7ff ff94 	bl	8004d54 <std>
 8004e2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e30:	2201      	movs	r2, #1
 8004e32:	2109      	movs	r1, #9
 8004e34:	f7ff ff8e 	bl	8004d54 <std>
 8004e38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff bf86 	b.w	8004d54 <std>
 8004e48:	20000524 	.word	0x20000524
 8004e4c:	200003ec 	.word	0x200003ec
 8004e50:	08004dc1 	.word	0x08004dc1

08004e54 <__sfp_lock_acquire>:
 8004e54:	4801      	ldr	r0, [pc, #4]	; (8004e5c <__sfp_lock_acquire+0x8>)
 8004e56:	f000 b92c 	b.w	80050b2 <__retarget_lock_acquire_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	2000052d 	.word	0x2000052d

08004e60 <__sfp_lock_release>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__sfp_lock_release+0x8>)
 8004e62:	f000 b927 	b.w	80050b4 <__retarget_lock_release_recursive>
 8004e66:	bf00      	nop
 8004e68:	2000052d 	.word	0x2000052d

08004e6c <__sinit>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	f7ff fff0 	bl	8004e54 <__sfp_lock_acquire>
 8004e74:	6a23      	ldr	r3, [r4, #32]
 8004e76:	b11b      	cbz	r3, 8004e80 <__sinit+0x14>
 8004e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7c:	f7ff bff0 	b.w	8004e60 <__sfp_lock_release>
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <__sinit+0x28>)
 8004e82:	6223      	str	r3, [r4, #32]
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <__sinit+0x2c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f5      	bne.n	8004e78 <__sinit+0xc>
 8004e8c:	f7ff ffc4 	bl	8004e18 <global_stdio_init.part.0>
 8004e90:	e7f2      	b.n	8004e78 <__sinit+0xc>
 8004e92:	bf00      	nop
 8004e94:	08004dd9 	.word	0x08004dd9
 8004e98:	20000524 	.word	0x20000524

08004e9c <_fwalk_sglue>:
 8004e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	4688      	mov	r8, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eac:	f1b9 0901 	subs.w	r9, r9, #1
 8004eb0:	d505      	bpl.n	8004ebe <_fwalk_sglue+0x22>
 8004eb2:	6824      	ldr	r4, [r4, #0]
 8004eb4:	2c00      	cmp	r4, #0
 8004eb6:	d1f7      	bne.n	8004ea8 <_fwalk_sglue+0xc>
 8004eb8:	4630      	mov	r0, r6
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d907      	bls.n	8004ed4 <_fwalk_sglue+0x38>
 8004ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	d003      	beq.n	8004ed4 <_fwalk_sglue+0x38>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c0      	blx	r8
 8004ed2:	4306      	orrs	r6, r0
 8004ed4:	3568      	adds	r5, #104	; 0x68
 8004ed6:	e7e9      	b.n	8004eac <_fwalk_sglue+0x10>

08004ed8 <siprintf>:
 8004ed8:	b40e      	push	{r1, r2, r3}
 8004eda:	b500      	push	{lr}
 8004edc:	b09c      	sub	sp, #112	; 0x70
 8004ede:	ab1d      	add	r3, sp, #116	; 0x74
 8004ee0:	9002      	str	r0, [sp, #8]
 8004ee2:	9006      	str	r0, [sp, #24]
 8004ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ee8:	4809      	ldr	r0, [pc, #36]	; (8004f10 <siprintf+0x38>)
 8004eea:	9107      	str	r1, [sp, #28]
 8004eec:	9104      	str	r1, [sp, #16]
 8004eee:	4909      	ldr	r1, [pc, #36]	; (8004f14 <siprintf+0x3c>)
 8004ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef4:	9105      	str	r1, [sp, #20]
 8004ef6:	6800      	ldr	r0, [r0, #0]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	a902      	add	r1, sp, #8
 8004efc:	f000 f9a0 	bl	8005240 <_svfiprintf_r>
 8004f00:	9b02      	ldr	r3, [sp, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	b01c      	add	sp, #112	; 0x70
 8004f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f0c:	b003      	add	sp, #12
 8004f0e:	4770      	bx	lr
 8004f10:	20000278 	.word	0x20000278
 8004f14:	ffff0208 	.word	0xffff0208

08004f18 <__sread>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f20:	f000 f868 	bl	8004ff4 <_read_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	bfab      	itete	ge
 8004f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f2c:	181b      	addge	r3, r3, r0
 8004f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f32:	bfac      	ite	ge
 8004f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f36:	81a3      	strhlt	r3, [r4, #12]
 8004f38:	bd10      	pop	{r4, pc}

08004f3a <__swrite>:
 8004f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3e:	461f      	mov	r7, r3
 8004f40:	898b      	ldrh	r3, [r1, #12]
 8004f42:	05db      	lsls	r3, r3, #23
 8004f44:	4605      	mov	r5, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4616      	mov	r6, r2
 8004f4a:	d505      	bpl.n	8004f58 <__swrite+0x1e>
 8004f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f50:	2302      	movs	r3, #2
 8004f52:	2200      	movs	r2, #0
 8004f54:	f000 f83c 	bl	8004fd0 <_lseek_r>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f62:	81a3      	strh	r3, [r4, #12]
 8004f64:	4632      	mov	r2, r6
 8004f66:	463b      	mov	r3, r7
 8004f68:	4628      	mov	r0, r5
 8004f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6e:	f000 b863 	b.w	8005038 <_write_r>

08004f72 <__sseek>:
 8004f72:	b510      	push	{r4, lr}
 8004f74:	460c      	mov	r4, r1
 8004f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7a:	f000 f829 	bl	8004fd0 <_lseek_r>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	bf15      	itete	ne
 8004f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f8e:	81a3      	strheq	r3, [r4, #12]
 8004f90:	bf18      	it	ne
 8004f92:	81a3      	strhne	r3, [r4, #12]
 8004f94:	bd10      	pop	{r4, pc}

08004f96 <__sclose>:
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 b809 	b.w	8004fb0 <_close_r>

08004f9e <memset>:
 8004f9e:	4402      	add	r2, r0
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d100      	bne.n	8004fa8 <memset+0xa>
 8004fa6:	4770      	bx	lr
 8004fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fac:	e7f9      	b.n	8004fa2 <memset+0x4>
	...

08004fb0 <_close_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_close_r+0x1c>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fd f981 	bl	80022c2 <_close>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_close_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_close_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20000528 	.word	0x20000528

08004fd0 <_lseek_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d07      	ldr	r5, [pc, #28]	; (8004ff0 <_lseek_r+0x20>)
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	2200      	movs	r2, #0
 8004fdc:	602a      	str	r2, [r5, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f7fd f996 	bl	8002310 <_lseek>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_lseek_r+0x1e>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_lseek_r+0x1e>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	20000528 	.word	0x20000528

08004ff4 <_read_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d07      	ldr	r5, [pc, #28]	; (8005014 <_read_r+0x20>)
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	2200      	movs	r2, #0
 8005000:	602a      	str	r2, [r5, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	f7fd f924 	bl	8002250 <_read>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_read_r+0x1e>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_read_r+0x1e>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000528 	.word	0x20000528

08005018 <_sbrk_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d06      	ldr	r5, [pc, #24]	; (8005034 <_sbrk_r+0x1c>)
 800501c:	2300      	movs	r3, #0
 800501e:	4604      	mov	r4, r0
 8005020:	4608      	mov	r0, r1
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	f7fd f982 	bl	800232c <_sbrk>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_sbrk_r+0x1a>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	b103      	cbz	r3, 8005032 <_sbrk_r+0x1a>
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20000528 	.word	0x20000528

08005038 <_write_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4d07      	ldr	r5, [pc, #28]	; (8005058 <_write_r+0x20>)
 800503c:	4604      	mov	r4, r0
 800503e:	4608      	mov	r0, r1
 8005040:	4611      	mov	r1, r2
 8005042:	2200      	movs	r2, #0
 8005044:	602a      	str	r2, [r5, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	f7fd f91f 	bl	800228a <_write>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <_write_r+0x1e>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	b103      	cbz	r3, 8005056 <_write_r+0x1e>
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	20000528 	.word	0x20000528

0800505c <__errno>:
 800505c:	4b01      	ldr	r3, [pc, #4]	; (8005064 <__errno+0x8>)
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000278 	.word	0x20000278

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4d0d      	ldr	r5, [pc, #52]	; (80050a0 <__libc_init_array+0x38>)
 800506c:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	2600      	movs	r6, #0
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	4d0b      	ldr	r5, [pc, #44]	; (80050a8 <__libc_init_array+0x40>)
 800507a:	4c0c      	ldr	r4, [pc, #48]	; (80050ac <__libc_init_array+0x44>)
 800507c:	f000 ff36 	bl	8005eec <_init>
 8005080:	1b64      	subs	r4, r4, r5
 8005082:	10a4      	asrs	r4, r4, #2
 8005084:	2600      	movs	r6, #0
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	080066b4 	.word	0x080066b4
 80050a4:	080066b4 	.word	0x080066b4
 80050a8:	080066b4 	.word	0x080066b4
 80050ac:	080066b8 	.word	0x080066b8

080050b0 <__retarget_lock_init_recursive>:
 80050b0:	4770      	bx	lr

080050b2 <__retarget_lock_acquire_recursive>:
 80050b2:	4770      	bx	lr

080050b4 <__retarget_lock_release_recursive>:
 80050b4:	4770      	bx	lr
	...

080050b8 <__assert_func>:
 80050b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050ba:	4614      	mov	r4, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <__assert_func+0x2c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4605      	mov	r5, r0
 80050c4:	68d8      	ldr	r0, [r3, #12]
 80050c6:	b14c      	cbz	r4, 80050dc <__assert_func+0x24>
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <__assert_func+0x30>)
 80050ca:	9100      	str	r1, [sp, #0]
 80050cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050d0:	4906      	ldr	r1, [pc, #24]	; (80050ec <__assert_func+0x34>)
 80050d2:	462b      	mov	r3, r5
 80050d4:	f000 fbf0 	bl	80058b8 <fiprintf>
 80050d8:	f000 fc28 	bl	800592c <abort>
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <__assert_func+0x38>)
 80050de:	461c      	mov	r4, r3
 80050e0:	e7f3      	b.n	80050ca <__assert_func+0x12>
 80050e2:	bf00      	nop
 80050e4:	20000278 	.word	0x20000278
 80050e8:	0800663b 	.word	0x0800663b
 80050ec:	08006648 	.word	0x08006648
 80050f0:	08006676 	.word	0x08006676

080050f4 <_free_r>:
 80050f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f6:	2900      	cmp	r1, #0
 80050f8:	d044      	beq.n	8005184 <_free_r+0x90>
 80050fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fe:	9001      	str	r0, [sp, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f1a1 0404 	sub.w	r4, r1, #4
 8005106:	bfb8      	it	lt
 8005108:	18e4      	addlt	r4, r4, r3
 800510a:	f7ff fdd9 	bl	8004cc0 <__malloc_lock>
 800510e:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <_free_r+0x94>)
 8005110:	9801      	ldr	r0, [sp, #4]
 8005112:	6813      	ldr	r3, [r2, #0]
 8005114:	b933      	cbnz	r3, 8005124 <_free_r+0x30>
 8005116:	6063      	str	r3, [r4, #4]
 8005118:	6014      	str	r4, [r2, #0]
 800511a:	b003      	add	sp, #12
 800511c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005120:	f7ff bdd4 	b.w	8004ccc <__malloc_unlock>
 8005124:	42a3      	cmp	r3, r4
 8005126:	d908      	bls.n	800513a <_free_r+0x46>
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	1961      	adds	r1, r4, r5
 800512c:	428b      	cmp	r3, r1
 800512e:	bf01      	itttt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	1949      	addeq	r1, r1, r5
 8005136:	6021      	streq	r1, [r4, #0]
 8005138:	e7ed      	b.n	8005116 <_free_r+0x22>
 800513a:	461a      	mov	r2, r3
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	b10b      	cbz	r3, 8005144 <_free_r+0x50>
 8005140:	42a3      	cmp	r3, r4
 8005142:	d9fa      	bls.n	800513a <_free_r+0x46>
 8005144:	6811      	ldr	r1, [r2, #0]
 8005146:	1855      	adds	r5, r2, r1
 8005148:	42a5      	cmp	r5, r4
 800514a:	d10b      	bne.n	8005164 <_free_r+0x70>
 800514c:	6824      	ldr	r4, [r4, #0]
 800514e:	4421      	add	r1, r4
 8005150:	1854      	adds	r4, r2, r1
 8005152:	42a3      	cmp	r3, r4
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	d1e0      	bne.n	800511a <_free_r+0x26>
 8005158:	681c      	ldr	r4, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	6053      	str	r3, [r2, #4]
 800515e:	440c      	add	r4, r1
 8005160:	6014      	str	r4, [r2, #0]
 8005162:	e7da      	b.n	800511a <_free_r+0x26>
 8005164:	d902      	bls.n	800516c <_free_r+0x78>
 8005166:	230c      	movs	r3, #12
 8005168:	6003      	str	r3, [r0, #0]
 800516a:	e7d6      	b.n	800511a <_free_r+0x26>
 800516c:	6825      	ldr	r5, [r4, #0]
 800516e:	1961      	adds	r1, r4, r5
 8005170:	428b      	cmp	r3, r1
 8005172:	bf04      	itt	eq
 8005174:	6819      	ldreq	r1, [r3, #0]
 8005176:	685b      	ldreq	r3, [r3, #4]
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	bf04      	itt	eq
 800517c:	1949      	addeq	r1, r1, r5
 800517e:	6021      	streq	r1, [r4, #0]
 8005180:	6054      	str	r4, [r2, #4]
 8005182:	e7ca      	b.n	800511a <_free_r+0x26>
 8005184:	b003      	add	sp, #12
 8005186:	bd30      	pop	{r4, r5, pc}
 8005188:	200003e4 	.word	0x200003e4

0800518c <__ssputs_r>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	688e      	ldr	r6, [r1, #8]
 8005192:	461f      	mov	r7, r3
 8005194:	42be      	cmp	r6, r7
 8005196:	680b      	ldr	r3, [r1, #0]
 8005198:	4682      	mov	sl, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4690      	mov	r8, r2
 800519e:	d82c      	bhi.n	80051fa <__ssputs_r+0x6e>
 80051a0:	898a      	ldrh	r2, [r1, #12]
 80051a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051a6:	d026      	beq.n	80051f6 <__ssputs_r+0x6a>
 80051a8:	6965      	ldr	r5, [r4, #20]
 80051aa:	6909      	ldr	r1, [r1, #16]
 80051ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b0:	eba3 0901 	sub.w	r9, r3, r1
 80051b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051b8:	1c7b      	adds	r3, r7, #1
 80051ba:	444b      	add	r3, r9
 80051bc:	106d      	asrs	r5, r5, #1
 80051be:	429d      	cmp	r5, r3
 80051c0:	bf38      	it	cc
 80051c2:	461d      	movcc	r5, r3
 80051c4:	0553      	lsls	r3, r2, #21
 80051c6:	d527      	bpl.n	8005218 <__ssputs_r+0x8c>
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7ff fcf9 	bl	8004bc0 <_malloc_r>
 80051ce:	4606      	mov	r6, r0
 80051d0:	b360      	cbz	r0, 800522c <__ssputs_r+0xa0>
 80051d2:	6921      	ldr	r1, [r4, #16]
 80051d4:	464a      	mov	r2, r9
 80051d6:	f000 fb9b 	bl	8005910 <memcpy>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	6126      	str	r6, [r4, #16]
 80051e8:	6165      	str	r5, [r4, #20]
 80051ea:	444e      	add	r6, r9
 80051ec:	eba5 0509 	sub.w	r5, r5, r9
 80051f0:	6026      	str	r6, [r4, #0]
 80051f2:	60a5      	str	r5, [r4, #8]
 80051f4:	463e      	mov	r6, r7
 80051f6:	42be      	cmp	r6, r7
 80051f8:	d900      	bls.n	80051fc <__ssputs_r+0x70>
 80051fa:	463e      	mov	r6, r7
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	4632      	mov	r2, r6
 8005200:	4641      	mov	r1, r8
 8005202:	f000 fb6b 	bl	80058dc <memmove>
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	1b9b      	subs	r3, r3, r6
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	4433      	add	r3, r6
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	2000      	movs	r0, #0
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	462a      	mov	r2, r5
 800521a:	f000 fb8e 	bl	800593a <_realloc_r>
 800521e:	4606      	mov	r6, r0
 8005220:	2800      	cmp	r0, #0
 8005222:	d1e0      	bne.n	80051e6 <__ssputs_r+0x5a>
 8005224:	6921      	ldr	r1, [r4, #16]
 8005226:	4650      	mov	r0, sl
 8005228:	f7ff ff64 	bl	80050f4 <_free_r>
 800522c:	230c      	movs	r3, #12
 800522e:	f8ca 3000 	str.w	r3, [sl]
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	f04f 30ff 	mov.w	r0, #4294967295
 800523e:	e7e9      	b.n	8005214 <__ssputs_r+0x88>

08005240 <_svfiprintf_r>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	4698      	mov	r8, r3
 8005246:	898b      	ldrh	r3, [r1, #12]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	b09d      	sub	sp, #116	; 0x74
 800524c:	4607      	mov	r7, r0
 800524e:	460d      	mov	r5, r1
 8005250:	4614      	mov	r4, r2
 8005252:	d50e      	bpl.n	8005272 <_svfiprintf_r+0x32>
 8005254:	690b      	ldr	r3, [r1, #16]
 8005256:	b963      	cbnz	r3, 8005272 <_svfiprintf_r+0x32>
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	f7ff fcb1 	bl	8004bc0 <_malloc_r>
 800525e:	6028      	str	r0, [r5, #0]
 8005260:	6128      	str	r0, [r5, #16]
 8005262:	b920      	cbnz	r0, 800526e <_svfiprintf_r+0x2e>
 8005264:	230c      	movs	r3, #12
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	e0d0      	b.n	8005410 <_svfiprintf_r+0x1d0>
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	616b      	str	r3, [r5, #20]
 8005272:	2300      	movs	r3, #0
 8005274:	9309      	str	r3, [sp, #36]	; 0x24
 8005276:	2320      	movs	r3, #32
 8005278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800527c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005280:	2330      	movs	r3, #48	; 0x30
 8005282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005428 <_svfiprintf_r+0x1e8>
 8005286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800528a:	f04f 0901 	mov.w	r9, #1
 800528e:	4623      	mov	r3, r4
 8005290:	469a      	mov	sl, r3
 8005292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005296:	b10a      	cbz	r2, 800529c <_svfiprintf_r+0x5c>
 8005298:	2a25      	cmp	r2, #37	; 0x25
 800529a:	d1f9      	bne.n	8005290 <_svfiprintf_r+0x50>
 800529c:	ebba 0b04 	subs.w	fp, sl, r4
 80052a0:	d00b      	beq.n	80052ba <_svfiprintf_r+0x7a>
 80052a2:	465b      	mov	r3, fp
 80052a4:	4622      	mov	r2, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	4638      	mov	r0, r7
 80052aa:	f7ff ff6f 	bl	800518c <__ssputs_r>
 80052ae:	3001      	adds	r0, #1
 80052b0:	f000 80a9 	beq.w	8005406 <_svfiprintf_r+0x1c6>
 80052b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b6:	445a      	add	r2, fp
 80052b8:	9209      	str	r2, [sp, #36]	; 0x24
 80052ba:	f89a 3000 	ldrb.w	r3, [sl]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80a1 	beq.w	8005406 <_svfiprintf_r+0x1c6>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ce:	f10a 0a01 	add.w	sl, sl, #1
 80052d2:	9304      	str	r3, [sp, #16]
 80052d4:	9307      	str	r3, [sp, #28]
 80052d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052da:	931a      	str	r3, [sp, #104]	; 0x68
 80052dc:	4654      	mov	r4, sl
 80052de:	2205      	movs	r2, #5
 80052e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e4:	4850      	ldr	r0, [pc, #320]	; (8005428 <_svfiprintf_r+0x1e8>)
 80052e6:	f7fa ff7b 	bl	80001e0 <memchr>
 80052ea:	9a04      	ldr	r2, [sp, #16]
 80052ec:	b9d8      	cbnz	r0, 8005326 <_svfiprintf_r+0xe6>
 80052ee:	06d0      	lsls	r0, r2, #27
 80052f0:	bf44      	itt	mi
 80052f2:	2320      	movmi	r3, #32
 80052f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f8:	0711      	lsls	r1, r2, #28
 80052fa:	bf44      	itt	mi
 80052fc:	232b      	movmi	r3, #43	; 0x2b
 80052fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005302:	f89a 3000 	ldrb.w	r3, [sl]
 8005306:	2b2a      	cmp	r3, #42	; 0x2a
 8005308:	d015      	beq.n	8005336 <_svfiprintf_r+0xf6>
 800530a:	9a07      	ldr	r2, [sp, #28]
 800530c:	4654      	mov	r4, sl
 800530e:	2000      	movs	r0, #0
 8005310:	f04f 0c0a 	mov.w	ip, #10
 8005314:	4621      	mov	r1, r4
 8005316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531a:	3b30      	subs	r3, #48	; 0x30
 800531c:	2b09      	cmp	r3, #9
 800531e:	d94d      	bls.n	80053bc <_svfiprintf_r+0x17c>
 8005320:	b1b0      	cbz	r0, 8005350 <_svfiprintf_r+0x110>
 8005322:	9207      	str	r2, [sp, #28]
 8005324:	e014      	b.n	8005350 <_svfiprintf_r+0x110>
 8005326:	eba0 0308 	sub.w	r3, r0, r8
 800532a:	fa09 f303 	lsl.w	r3, r9, r3
 800532e:	4313      	orrs	r3, r2
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	46a2      	mov	sl, r4
 8005334:	e7d2      	b.n	80052dc <_svfiprintf_r+0x9c>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	1d19      	adds	r1, r3, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	9103      	str	r1, [sp, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	bfbb      	ittet	lt
 8005342:	425b      	neglt	r3, r3
 8005344:	f042 0202 	orrlt.w	r2, r2, #2
 8005348:	9307      	strge	r3, [sp, #28]
 800534a:	9307      	strlt	r3, [sp, #28]
 800534c:	bfb8      	it	lt
 800534e:	9204      	strlt	r2, [sp, #16]
 8005350:	7823      	ldrb	r3, [r4, #0]
 8005352:	2b2e      	cmp	r3, #46	; 0x2e
 8005354:	d10c      	bne.n	8005370 <_svfiprintf_r+0x130>
 8005356:	7863      	ldrb	r3, [r4, #1]
 8005358:	2b2a      	cmp	r3, #42	; 0x2a
 800535a:	d134      	bne.n	80053c6 <_svfiprintf_r+0x186>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	9203      	str	r2, [sp, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfb8      	it	lt
 8005368:	f04f 33ff 	movlt.w	r3, #4294967295
 800536c:	3402      	adds	r4, #2
 800536e:	9305      	str	r3, [sp, #20]
 8005370:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005438 <_svfiprintf_r+0x1f8>
 8005374:	7821      	ldrb	r1, [r4, #0]
 8005376:	2203      	movs	r2, #3
 8005378:	4650      	mov	r0, sl
 800537a:	f7fa ff31 	bl	80001e0 <memchr>
 800537e:	b138      	cbz	r0, 8005390 <_svfiprintf_r+0x150>
 8005380:	9b04      	ldr	r3, [sp, #16]
 8005382:	eba0 000a 	sub.w	r0, r0, sl
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	4082      	lsls	r2, r0
 800538a:	4313      	orrs	r3, r2
 800538c:	3401      	adds	r4, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005394:	4825      	ldr	r0, [pc, #148]	; (800542c <_svfiprintf_r+0x1ec>)
 8005396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800539a:	2206      	movs	r2, #6
 800539c:	f7fa ff20 	bl	80001e0 <memchr>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d038      	beq.n	8005416 <_svfiprintf_r+0x1d6>
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <_svfiprintf_r+0x1f0>)
 80053a6:	bb1b      	cbnz	r3, 80053f0 <_svfiprintf_r+0x1b0>
 80053a8:	9b03      	ldr	r3, [sp, #12]
 80053aa:	3307      	adds	r3, #7
 80053ac:	f023 0307 	bic.w	r3, r3, #7
 80053b0:	3308      	adds	r3, #8
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b6:	4433      	add	r3, r6
 80053b8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ba:	e768      	b.n	800528e <_svfiprintf_r+0x4e>
 80053bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c0:	460c      	mov	r4, r1
 80053c2:	2001      	movs	r0, #1
 80053c4:	e7a6      	b.n	8005314 <_svfiprintf_r+0xd4>
 80053c6:	2300      	movs	r3, #0
 80053c8:	3401      	adds	r4, #1
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f04f 0c0a 	mov.w	ip, #10
 80053d2:	4620      	mov	r0, r4
 80053d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d8:	3a30      	subs	r2, #48	; 0x30
 80053da:	2a09      	cmp	r2, #9
 80053dc:	d903      	bls.n	80053e6 <_svfiprintf_r+0x1a6>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0c6      	beq.n	8005370 <_svfiprintf_r+0x130>
 80053e2:	9105      	str	r1, [sp, #20]
 80053e4:	e7c4      	b.n	8005370 <_svfiprintf_r+0x130>
 80053e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ea:	4604      	mov	r4, r0
 80053ec:	2301      	movs	r3, #1
 80053ee:	e7f0      	b.n	80053d2 <_svfiprintf_r+0x192>
 80053f0:	ab03      	add	r3, sp, #12
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	462a      	mov	r2, r5
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <_svfiprintf_r+0x1f4>)
 80053f8:	a904      	add	r1, sp, #16
 80053fa:	4638      	mov	r0, r7
 80053fc:	f3af 8000 	nop.w
 8005400:	1c42      	adds	r2, r0, #1
 8005402:	4606      	mov	r6, r0
 8005404:	d1d6      	bne.n	80053b4 <_svfiprintf_r+0x174>
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	065b      	lsls	r3, r3, #25
 800540a:	f53f af2d 	bmi.w	8005268 <_svfiprintf_r+0x28>
 800540e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005410:	b01d      	add	sp, #116	; 0x74
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <_svfiprintf_r+0x1f4>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4638      	mov	r0, r7
 8005422:	f000 f879 	bl	8005518 <_printf_i>
 8005426:	e7eb      	b.n	8005400 <_svfiprintf_r+0x1c0>
 8005428:	08006677 	.word	0x08006677
 800542c:	08006681 	.word	0x08006681
 8005430:	00000000 	.word	0x00000000
 8005434:	0800518d 	.word	0x0800518d
 8005438:	0800667d 	.word	0x0800667d

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4616      	mov	r6, r2
 8005442:	4699      	mov	r9, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	bfb8      	it	lt
 8005450:	4613      	movlt	r3, r2
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005458:	4607      	mov	r7, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b10a      	cbz	r2, 8005462 <_printf_common+0x26>
 800545e:	3301      	adds	r3, #1
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	6833      	ldrmi	r3, [r6, #0]
 800546a:	3302      	addmi	r3, #2
 800546c:	6033      	strmi	r3, [r6, #0]
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	f015 0506 	ands.w	r5, r5, #6
 8005474:	d106      	bne.n	8005484 <_printf_common+0x48>
 8005476:	f104 0a19 	add.w	sl, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	42ab      	cmp	r3, r5
 8005482:	dc26      	bgt.n	80054d2 <_printf_common+0x96>
 8005484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005488:	1e13      	subs	r3, r2, #0
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	bf18      	it	ne
 800548e:	2301      	movne	r3, #1
 8005490:	0692      	lsls	r2, r2, #26
 8005492:	d42b      	bmi.n	80054ec <_printf_common+0xb0>
 8005494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005498:	4649      	mov	r1, r9
 800549a:	4638      	mov	r0, r7
 800549c:	47c0      	blx	r8
 800549e:	3001      	adds	r0, #1
 80054a0:	d01e      	beq.n	80054e0 <_printf_common+0xa4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	f003 0306 	and.w	r3, r3, #6
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf02      	ittt	eq
 80054ae:	68e5      	ldreq	r5, [r4, #12]
 80054b0:	6833      	ldreq	r3, [r6, #0]
 80054b2:	1aed      	subeq	r5, r5, r3
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	2600      	movs	r6, #0
 80054c8:	341a      	adds	r4, #26
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	d11a      	bne.n	8005504 <_printf_common+0xc8>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e008      	b.n	80054e4 <_printf_common+0xa8>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4652      	mov	r2, sl
 80054d6:	4649      	mov	r1, r9
 80054d8:	4638      	mov	r0, r7
 80054da:	47c0      	blx	r8
 80054dc:	3001      	adds	r0, #1
 80054de:	d103      	bne.n	80054e8 <_printf_common+0xac>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	3501      	adds	r5, #1
 80054ea:	e7c6      	b.n	800547a <_printf_common+0x3e>
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	2030      	movs	r0, #48	; 0x30
 80054f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f6:	4422      	add	r2, r4
 80054f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005500:	3302      	adds	r3, #2
 8005502:	e7c7      	b.n	8005494 <_printf_common+0x58>
 8005504:	2301      	movs	r3, #1
 8005506:	4622      	mov	r2, r4
 8005508:	4649      	mov	r1, r9
 800550a:	4638      	mov	r0, r7
 800550c:	47c0      	blx	r8
 800550e:	3001      	adds	r0, #1
 8005510:	d0e6      	beq.n	80054e0 <_printf_common+0xa4>
 8005512:	3601      	adds	r6, #1
 8005514:	e7d9      	b.n	80054ca <_printf_common+0x8e>
	...

08005518 <_printf_i>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	7e0f      	ldrb	r7, [r1, #24]
 800551e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005520:	2f78      	cmp	r7, #120	; 0x78
 8005522:	4691      	mov	r9, r2
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	469a      	mov	sl, r3
 800552a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800552e:	d807      	bhi.n	8005540 <_printf_i+0x28>
 8005530:	2f62      	cmp	r7, #98	; 0x62
 8005532:	d80a      	bhi.n	800554a <_printf_i+0x32>
 8005534:	2f00      	cmp	r7, #0
 8005536:	f000 80d4 	beq.w	80056e2 <_printf_i+0x1ca>
 800553a:	2f58      	cmp	r7, #88	; 0x58
 800553c:	f000 80c0 	beq.w	80056c0 <_printf_i+0x1a8>
 8005540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005548:	e03a      	b.n	80055c0 <_printf_i+0xa8>
 800554a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554e:	2b15      	cmp	r3, #21
 8005550:	d8f6      	bhi.n	8005540 <_printf_i+0x28>
 8005552:	a101      	add	r1, pc, #4	; (adr r1, 8005558 <_printf_i+0x40>)
 8005554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055c5 	.word	0x080055c5
 8005560:	08005541 	.word	0x08005541
 8005564:	08005541 	.word	0x08005541
 8005568:	08005541 	.word	0x08005541
 800556c:	08005541 	.word	0x08005541
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005541 	.word	0x08005541
 8005578:	08005541 	.word	0x08005541
 800557c:	08005541 	.word	0x08005541
 8005580:	08005541 	.word	0x08005541
 8005584:	080056c9 	.word	0x080056c9
 8005588:	080055f1 	.word	0x080055f1
 800558c:	08005683 	.word	0x08005683
 8005590:	08005541 	.word	0x08005541
 8005594:	08005541 	.word	0x08005541
 8005598:	080056eb 	.word	0x080056eb
 800559c:	08005541 	.word	0x08005541
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	08005541 	.word	0x08005541
 80055a8:	08005541 	.word	0x08005541
 80055ac:	0800568b 	.word	0x0800568b
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	602a      	str	r2, [r5, #0]
 80055b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c0:	2301      	movs	r3, #1
 80055c2:	e09f      	b.n	8005704 <_printf_i+0x1ec>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	0607      	lsls	r7, r0, #24
 80055ca:	f103 0104 	add.w	r1, r3, #4
 80055ce:	6029      	str	r1, [r5, #0]
 80055d0:	d501      	bpl.n	80055d6 <_printf_i+0xbe>
 80055d2:	681e      	ldr	r6, [r3, #0]
 80055d4:	e003      	b.n	80055de <_printf_i+0xc6>
 80055d6:	0646      	lsls	r6, r0, #25
 80055d8:	d5fb      	bpl.n	80055d2 <_printf_i+0xba>
 80055da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055de:	2e00      	cmp	r6, #0
 80055e0:	da03      	bge.n	80055ea <_printf_i+0xd2>
 80055e2:	232d      	movs	r3, #45	; 0x2d
 80055e4:	4276      	negs	r6, r6
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ea:	485a      	ldr	r0, [pc, #360]	; (8005754 <_printf_i+0x23c>)
 80055ec:	230a      	movs	r3, #10
 80055ee:	e012      	b.n	8005616 <_printf_i+0xfe>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	1d19      	adds	r1, r3, #4
 80055f6:	6029      	str	r1, [r5, #0]
 80055f8:	0605      	lsls	r5, r0, #24
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0xe8>
 80055fc:	681e      	ldr	r6, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0xee>
 8005600:	0641      	lsls	r1, r0, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0xe4>
 8005604:	881e      	ldrh	r6, [r3, #0]
 8005606:	4853      	ldr	r0, [pc, #332]	; (8005754 <_printf_i+0x23c>)
 8005608:	2f6f      	cmp	r7, #111	; 0x6f
 800560a:	bf0c      	ite	eq
 800560c:	2308      	moveq	r3, #8
 800560e:	230a      	movne	r3, #10
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005616:	6865      	ldr	r5, [r4, #4]
 8005618:	60a5      	str	r5, [r4, #8]
 800561a:	2d00      	cmp	r5, #0
 800561c:	bfa2      	ittt	ge
 800561e:	6821      	ldrge	r1, [r4, #0]
 8005620:	f021 0104 	bicge.w	r1, r1, #4
 8005624:	6021      	strge	r1, [r4, #0]
 8005626:	b90e      	cbnz	r6, 800562c <_printf_i+0x114>
 8005628:	2d00      	cmp	r5, #0
 800562a:	d04b      	beq.n	80056c4 <_printf_i+0x1ac>
 800562c:	4615      	mov	r5, r2
 800562e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005632:	fb03 6711 	mls	r7, r3, r1, r6
 8005636:	5dc7      	ldrb	r7, [r0, r7]
 8005638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800563c:	4637      	mov	r7, r6
 800563e:	42bb      	cmp	r3, r7
 8005640:	460e      	mov	r6, r1
 8005642:	d9f4      	bls.n	800562e <_printf_i+0x116>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10b      	bne.n	8005660 <_printf_i+0x148>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07de      	lsls	r6, r3, #31
 800564c:	d508      	bpl.n	8005660 <_printf_i+0x148>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	6861      	ldr	r1, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	bfde      	ittt	le
 8005656:	2330      	movle	r3, #48	; 0x30
 8005658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800565c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005660:	1b52      	subs	r2, r2, r5
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	f8cd a000 	str.w	sl, [sp]
 8005668:	464b      	mov	r3, r9
 800566a:	aa03      	add	r2, sp, #12
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fee4 	bl	800543c <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	d14a      	bne.n	800570e <_printf_i+0x1f6>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b004      	add	sp, #16
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	4833      	ldr	r0, [pc, #204]	; (8005758 <_printf_i+0x240>)
 800568c:	2778      	movs	r7, #120	; 0x78
 800568e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	6829      	ldr	r1, [r5, #0]
 8005696:	061f      	lsls	r7, r3, #24
 8005698:	f851 6b04 	ldr.w	r6, [r1], #4
 800569c:	d402      	bmi.n	80056a4 <_printf_i+0x18c>
 800569e:	065f      	lsls	r7, r3, #25
 80056a0:	bf48      	it	mi
 80056a2:	b2b6      	uxthmi	r6, r6
 80056a4:	07df      	lsls	r7, r3, #31
 80056a6:	bf48      	it	mi
 80056a8:	f043 0320 	orrmi.w	r3, r3, #32
 80056ac:	6029      	str	r1, [r5, #0]
 80056ae:	bf48      	it	mi
 80056b0:	6023      	strmi	r3, [r4, #0]
 80056b2:	b91e      	cbnz	r6, 80056bc <_printf_i+0x1a4>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	2310      	movs	r3, #16
 80056be:	e7a7      	b.n	8005610 <_printf_i+0xf8>
 80056c0:	4824      	ldr	r0, [pc, #144]	; (8005754 <_printf_i+0x23c>)
 80056c2:	e7e4      	b.n	800568e <_printf_i+0x176>
 80056c4:	4615      	mov	r5, r2
 80056c6:	e7bd      	b.n	8005644 <_printf_i+0x12c>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	6826      	ldr	r6, [r4, #0]
 80056cc:	6961      	ldr	r1, [r4, #20]
 80056ce:	1d18      	adds	r0, r3, #4
 80056d0:	6028      	str	r0, [r5, #0]
 80056d2:	0635      	lsls	r5, r6, #24
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	d501      	bpl.n	80056dc <_printf_i+0x1c4>
 80056d8:	6019      	str	r1, [r3, #0]
 80056da:	e002      	b.n	80056e2 <_printf_i+0x1ca>
 80056dc:	0670      	lsls	r0, r6, #25
 80056de:	d5fb      	bpl.n	80056d8 <_printf_i+0x1c0>
 80056e0:	8019      	strh	r1, [r3, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	4615      	mov	r5, r2
 80056e8:	e7bc      	b.n	8005664 <_printf_i+0x14c>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	602a      	str	r2, [r5, #0]
 80056f0:	681d      	ldr	r5, [r3, #0]
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fa fd72 	bl	80001e0 <memchr>
 80056fc:	b108      	cbz	r0, 8005702 <_printf_i+0x1ea>
 80056fe:	1b40      	subs	r0, r0, r5
 8005700:	6060      	str	r0, [r4, #4]
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	2300      	movs	r3, #0
 8005708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570c:	e7aa      	b.n	8005664 <_printf_i+0x14c>
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	462a      	mov	r2, r5
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d0ad      	beq.n	8005678 <_printf_i+0x160>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	079b      	lsls	r3, r3, #30
 8005720:	d413      	bmi.n	800574a <_printf_i+0x232>
 8005722:	68e0      	ldr	r0, [r4, #12]
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	4298      	cmp	r0, r3
 8005728:	bfb8      	it	lt
 800572a:	4618      	movlt	r0, r3
 800572c:	e7a6      	b.n	800567c <_printf_i+0x164>
 800572e:	2301      	movs	r3, #1
 8005730:	4632      	mov	r2, r6
 8005732:	4649      	mov	r1, r9
 8005734:	4640      	mov	r0, r8
 8005736:	47d0      	blx	sl
 8005738:	3001      	adds	r0, #1
 800573a:	d09d      	beq.n	8005678 <_printf_i+0x160>
 800573c:	3501      	adds	r5, #1
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	9903      	ldr	r1, [sp, #12]
 8005742:	1a5b      	subs	r3, r3, r1
 8005744:	42ab      	cmp	r3, r5
 8005746:	dcf2      	bgt.n	800572e <_printf_i+0x216>
 8005748:	e7eb      	b.n	8005722 <_printf_i+0x20a>
 800574a:	2500      	movs	r5, #0
 800574c:	f104 0619 	add.w	r6, r4, #25
 8005750:	e7f5      	b.n	800573e <_printf_i+0x226>
 8005752:	bf00      	nop
 8005754:	08006688 	.word	0x08006688
 8005758:	08006699 	.word	0x08006699

0800575c <__sflush_r>:
 800575c:	898a      	ldrh	r2, [r1, #12]
 800575e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005762:	4605      	mov	r5, r0
 8005764:	0710      	lsls	r0, r2, #28
 8005766:	460c      	mov	r4, r1
 8005768:	d458      	bmi.n	800581c <__sflush_r+0xc0>
 800576a:	684b      	ldr	r3, [r1, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	dc05      	bgt.n	800577c <__sflush_r+0x20>
 8005770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	dc02      	bgt.n	800577c <__sflush_r+0x20>
 8005776:	2000      	movs	r0, #0
 8005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800577c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577e:	2e00      	cmp	r6, #0
 8005780:	d0f9      	beq.n	8005776 <__sflush_r+0x1a>
 8005782:	2300      	movs	r3, #0
 8005784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005788:	682f      	ldr	r7, [r5, #0]
 800578a:	6a21      	ldr	r1, [r4, #32]
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	d032      	beq.n	80057f6 <__sflush_r+0x9a>
 8005790:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	075a      	lsls	r2, r3, #29
 8005796:	d505      	bpl.n	80057a4 <__sflush_r+0x48>
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	1ac0      	subs	r0, r0, r3
 800579c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800579e:	b10b      	cbz	r3, 80057a4 <__sflush_r+0x48>
 80057a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057a2:	1ac0      	subs	r0, r0, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	4602      	mov	r2, r0
 80057a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057aa:	6a21      	ldr	r1, [r4, #32]
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b0      	blx	r6
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	d106      	bne.n	80057c4 <__sflush_r+0x68>
 80057b6:	6829      	ldr	r1, [r5, #0]
 80057b8:	291d      	cmp	r1, #29
 80057ba:	d82b      	bhi.n	8005814 <__sflush_r+0xb8>
 80057bc:	4a29      	ldr	r2, [pc, #164]	; (8005864 <__sflush_r+0x108>)
 80057be:	410a      	asrs	r2, r1
 80057c0:	07d6      	lsls	r6, r2, #31
 80057c2:	d427      	bmi.n	8005814 <__sflush_r+0xb8>
 80057c4:	2200      	movs	r2, #0
 80057c6:	6062      	str	r2, [r4, #4]
 80057c8:	04d9      	lsls	r1, r3, #19
 80057ca:	6922      	ldr	r2, [r4, #16]
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	d504      	bpl.n	80057da <__sflush_r+0x7e>
 80057d0:	1c42      	adds	r2, r0, #1
 80057d2:	d101      	bne.n	80057d8 <__sflush_r+0x7c>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b903      	cbnz	r3, 80057da <__sflush_r+0x7e>
 80057d8:	6560      	str	r0, [r4, #84]	; 0x54
 80057da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057dc:	602f      	str	r7, [r5, #0]
 80057de:	2900      	cmp	r1, #0
 80057e0:	d0c9      	beq.n	8005776 <__sflush_r+0x1a>
 80057e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e6:	4299      	cmp	r1, r3
 80057e8:	d002      	beq.n	80057f0 <__sflush_r+0x94>
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7ff fc82 	bl	80050f4 <_free_r>
 80057f0:	2000      	movs	r0, #0
 80057f2:	6360      	str	r0, [r4, #52]	; 0x34
 80057f4:	e7c0      	b.n	8005778 <__sflush_r+0x1c>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b0      	blx	r6
 80057fc:	1c41      	adds	r1, r0, #1
 80057fe:	d1c8      	bne.n	8005792 <__sflush_r+0x36>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0c5      	beq.n	8005792 <__sflush_r+0x36>
 8005806:	2b1d      	cmp	r3, #29
 8005808:	d001      	beq.n	800580e <__sflush_r+0xb2>
 800580a:	2b16      	cmp	r3, #22
 800580c:	d101      	bne.n	8005812 <__sflush_r+0xb6>
 800580e:	602f      	str	r7, [r5, #0]
 8005810:	e7b1      	b.n	8005776 <__sflush_r+0x1a>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	e7ad      	b.n	8005778 <__sflush_r+0x1c>
 800581c:	690f      	ldr	r7, [r1, #16]
 800581e:	2f00      	cmp	r7, #0
 8005820:	d0a9      	beq.n	8005776 <__sflush_r+0x1a>
 8005822:	0793      	lsls	r3, r2, #30
 8005824:	680e      	ldr	r6, [r1, #0]
 8005826:	bf08      	it	eq
 8005828:	694b      	ldreq	r3, [r1, #20]
 800582a:	600f      	str	r7, [r1, #0]
 800582c:	bf18      	it	ne
 800582e:	2300      	movne	r3, #0
 8005830:	eba6 0807 	sub.w	r8, r6, r7
 8005834:	608b      	str	r3, [r1, #8]
 8005836:	f1b8 0f00 	cmp.w	r8, #0
 800583a:	dd9c      	ble.n	8005776 <__sflush_r+0x1a>
 800583c:	6a21      	ldr	r1, [r4, #32]
 800583e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005840:	4643      	mov	r3, r8
 8005842:	463a      	mov	r2, r7
 8005844:	4628      	mov	r0, r5
 8005846:	47b0      	blx	r6
 8005848:	2800      	cmp	r0, #0
 800584a:	dc06      	bgt.n	800585a <__sflush_r+0xfe>
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	f04f 30ff 	mov.w	r0, #4294967295
 8005858:	e78e      	b.n	8005778 <__sflush_r+0x1c>
 800585a:	4407      	add	r7, r0
 800585c:	eba8 0800 	sub.w	r8, r8, r0
 8005860:	e7e9      	b.n	8005836 <__sflush_r+0xda>
 8005862:	bf00      	nop
 8005864:	dfbffffe 	.word	0xdfbffffe

08005868 <_fflush_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	690b      	ldr	r3, [r1, #16]
 800586c:	4605      	mov	r5, r0
 800586e:	460c      	mov	r4, r1
 8005870:	b913      	cbnz	r3, 8005878 <_fflush_r+0x10>
 8005872:	2500      	movs	r5, #0
 8005874:	4628      	mov	r0, r5
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	b118      	cbz	r0, 8005882 <_fflush_r+0x1a>
 800587a:	6a03      	ldr	r3, [r0, #32]
 800587c:	b90b      	cbnz	r3, 8005882 <_fflush_r+0x1a>
 800587e:	f7ff faf5 	bl	8004e6c <__sinit>
 8005882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f3      	beq.n	8005872 <_fflush_r+0xa>
 800588a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800588c:	07d0      	lsls	r0, r2, #31
 800588e:	d404      	bmi.n	800589a <_fflush_r+0x32>
 8005890:	0599      	lsls	r1, r3, #22
 8005892:	d402      	bmi.n	800589a <_fflush_r+0x32>
 8005894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005896:	f7ff fc0c 	bl	80050b2 <__retarget_lock_acquire_recursive>
 800589a:	4628      	mov	r0, r5
 800589c:	4621      	mov	r1, r4
 800589e:	f7ff ff5d 	bl	800575c <__sflush_r>
 80058a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a4:	07da      	lsls	r2, r3, #31
 80058a6:	4605      	mov	r5, r0
 80058a8:	d4e4      	bmi.n	8005874 <_fflush_r+0xc>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	059b      	lsls	r3, r3, #22
 80058ae:	d4e1      	bmi.n	8005874 <_fflush_r+0xc>
 80058b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058b2:	f7ff fbff 	bl	80050b4 <__retarget_lock_release_recursive>
 80058b6:	e7dd      	b.n	8005874 <_fflush_r+0xc>

080058b8 <fiprintf>:
 80058b8:	b40e      	push	{r1, r2, r3}
 80058ba:	b503      	push	{r0, r1, lr}
 80058bc:	4601      	mov	r1, r0
 80058be:	ab03      	add	r3, sp, #12
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <fiprintf+0x20>)
 80058c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	f000 f88f 	bl	80059ec <_vfiprintf_r>
 80058ce:	b002      	add	sp, #8
 80058d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d4:	b003      	add	sp, #12
 80058d6:	4770      	bx	lr
 80058d8:	20000278 	.word	0x20000278

080058dc <memmove>:
 80058dc:	4288      	cmp	r0, r1
 80058de:	b510      	push	{r4, lr}
 80058e0:	eb01 0402 	add.w	r4, r1, r2
 80058e4:	d902      	bls.n	80058ec <memmove+0x10>
 80058e6:	4284      	cmp	r4, r0
 80058e8:	4623      	mov	r3, r4
 80058ea:	d807      	bhi.n	80058fc <memmove+0x20>
 80058ec:	1e43      	subs	r3, r0, #1
 80058ee:	42a1      	cmp	r1, r4
 80058f0:	d008      	beq.n	8005904 <memmove+0x28>
 80058f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058fa:	e7f8      	b.n	80058ee <memmove+0x12>
 80058fc:	4402      	add	r2, r0
 80058fe:	4601      	mov	r1, r0
 8005900:	428a      	cmp	r2, r1
 8005902:	d100      	bne.n	8005906 <memmove+0x2a>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800590a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800590e:	e7f7      	b.n	8005900 <memmove+0x24>

08005910 <memcpy>:
 8005910:	440a      	add	r2, r1
 8005912:	4291      	cmp	r1, r2
 8005914:	f100 33ff 	add.w	r3, r0, #4294967295
 8005918:	d100      	bne.n	800591c <memcpy+0xc>
 800591a:	4770      	bx	lr
 800591c:	b510      	push	{r4, lr}
 800591e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005926:	4291      	cmp	r1, r2
 8005928:	d1f9      	bne.n	800591e <memcpy+0xe>
 800592a:	bd10      	pop	{r4, pc}

0800592c <abort>:
 800592c:	b508      	push	{r3, lr}
 800592e:	2006      	movs	r0, #6
 8005930:	f000 fa34 	bl	8005d9c <raise>
 8005934:	2001      	movs	r0, #1
 8005936:	f7fc fc81 	bl	800223c <_exit>

0800593a <_realloc_r>:
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	4680      	mov	r8, r0
 8005940:	4614      	mov	r4, r2
 8005942:	460e      	mov	r6, r1
 8005944:	b921      	cbnz	r1, 8005950 <_realloc_r+0x16>
 8005946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	4611      	mov	r1, r2
 800594c:	f7ff b938 	b.w	8004bc0 <_malloc_r>
 8005950:	b92a      	cbnz	r2, 800595e <_realloc_r+0x24>
 8005952:	f7ff fbcf 	bl	80050f4 <_free_r>
 8005956:	4625      	mov	r5, r4
 8005958:	4628      	mov	r0, r5
 800595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800595e:	f000 fa39 	bl	8005dd4 <_malloc_usable_size_r>
 8005962:	4284      	cmp	r4, r0
 8005964:	4607      	mov	r7, r0
 8005966:	d802      	bhi.n	800596e <_realloc_r+0x34>
 8005968:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800596c:	d812      	bhi.n	8005994 <_realloc_r+0x5a>
 800596e:	4621      	mov	r1, r4
 8005970:	4640      	mov	r0, r8
 8005972:	f7ff f925 	bl	8004bc0 <_malloc_r>
 8005976:	4605      	mov	r5, r0
 8005978:	2800      	cmp	r0, #0
 800597a:	d0ed      	beq.n	8005958 <_realloc_r+0x1e>
 800597c:	42bc      	cmp	r4, r7
 800597e:	4622      	mov	r2, r4
 8005980:	4631      	mov	r1, r6
 8005982:	bf28      	it	cs
 8005984:	463a      	movcs	r2, r7
 8005986:	f7ff ffc3 	bl	8005910 <memcpy>
 800598a:	4631      	mov	r1, r6
 800598c:	4640      	mov	r0, r8
 800598e:	f7ff fbb1 	bl	80050f4 <_free_r>
 8005992:	e7e1      	b.n	8005958 <_realloc_r+0x1e>
 8005994:	4635      	mov	r5, r6
 8005996:	e7df      	b.n	8005958 <_realloc_r+0x1e>

08005998 <__sfputc_r>:
 8005998:	6893      	ldr	r3, [r2, #8]
 800599a:	3b01      	subs	r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	b410      	push	{r4}
 80059a0:	6093      	str	r3, [r2, #8]
 80059a2:	da08      	bge.n	80059b6 <__sfputc_r+0x1e>
 80059a4:	6994      	ldr	r4, [r2, #24]
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	db01      	blt.n	80059ae <__sfputc_r+0x16>
 80059aa:	290a      	cmp	r1, #10
 80059ac:	d103      	bne.n	80059b6 <__sfputc_r+0x1e>
 80059ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059b2:	f000 b935 	b.w	8005c20 <__swbuf_r>
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	1c58      	adds	r0, r3, #1
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	7019      	strb	r1, [r3, #0]
 80059be:	4608      	mov	r0, r1
 80059c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <__sfputs_r>:
 80059c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c8:	4606      	mov	r6, r0
 80059ca:	460f      	mov	r7, r1
 80059cc:	4614      	mov	r4, r2
 80059ce:	18d5      	adds	r5, r2, r3
 80059d0:	42ac      	cmp	r4, r5
 80059d2:	d101      	bne.n	80059d8 <__sfputs_r+0x12>
 80059d4:	2000      	movs	r0, #0
 80059d6:	e007      	b.n	80059e8 <__sfputs_r+0x22>
 80059d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059dc:	463a      	mov	r2, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	f7ff ffda 	bl	8005998 <__sfputc_r>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d1f3      	bne.n	80059d0 <__sfputs_r+0xa>
 80059e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059ec <_vfiprintf_r>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	460d      	mov	r5, r1
 80059f2:	b09d      	sub	sp, #116	; 0x74
 80059f4:	4614      	mov	r4, r2
 80059f6:	4698      	mov	r8, r3
 80059f8:	4606      	mov	r6, r0
 80059fa:	b118      	cbz	r0, 8005a04 <_vfiprintf_r+0x18>
 80059fc:	6a03      	ldr	r3, [r0, #32]
 80059fe:	b90b      	cbnz	r3, 8005a04 <_vfiprintf_r+0x18>
 8005a00:	f7ff fa34 	bl	8004e6c <__sinit>
 8005a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a06:	07d9      	lsls	r1, r3, #31
 8005a08:	d405      	bmi.n	8005a16 <_vfiprintf_r+0x2a>
 8005a0a:	89ab      	ldrh	r3, [r5, #12]
 8005a0c:	059a      	lsls	r2, r3, #22
 8005a0e:	d402      	bmi.n	8005a16 <_vfiprintf_r+0x2a>
 8005a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a12:	f7ff fb4e 	bl	80050b2 <__retarget_lock_acquire_recursive>
 8005a16:	89ab      	ldrh	r3, [r5, #12]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	d501      	bpl.n	8005a20 <_vfiprintf_r+0x34>
 8005a1c:	692b      	ldr	r3, [r5, #16]
 8005a1e:	b99b      	cbnz	r3, 8005a48 <_vfiprintf_r+0x5c>
 8005a20:	4629      	mov	r1, r5
 8005a22:	4630      	mov	r0, r6
 8005a24:	f000 f93a 	bl	8005c9c <__swsetup_r>
 8005a28:	b170      	cbz	r0, 8005a48 <_vfiprintf_r+0x5c>
 8005a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a2c:	07dc      	lsls	r4, r3, #31
 8005a2e:	d504      	bpl.n	8005a3a <_vfiprintf_r+0x4e>
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	b01d      	add	sp, #116	; 0x74
 8005a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	0598      	lsls	r0, r3, #22
 8005a3e:	d4f7      	bmi.n	8005a30 <_vfiprintf_r+0x44>
 8005a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a42:	f7ff fb37 	bl	80050b4 <__retarget_lock_release_recursive>
 8005a46:	e7f3      	b.n	8005a30 <_vfiprintf_r+0x44>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4c:	2320      	movs	r3, #32
 8005a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a56:	2330      	movs	r3, #48	; 0x30
 8005a58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c0c <_vfiprintf_r+0x220>
 8005a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a60:	f04f 0901 	mov.w	r9, #1
 8005a64:	4623      	mov	r3, r4
 8005a66:	469a      	mov	sl, r3
 8005a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a6c:	b10a      	cbz	r2, 8005a72 <_vfiprintf_r+0x86>
 8005a6e:	2a25      	cmp	r2, #37	; 0x25
 8005a70:	d1f9      	bne.n	8005a66 <_vfiprintf_r+0x7a>
 8005a72:	ebba 0b04 	subs.w	fp, sl, r4
 8005a76:	d00b      	beq.n	8005a90 <_vfiprintf_r+0xa4>
 8005a78:	465b      	mov	r3, fp
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ffa1 	bl	80059c6 <__sfputs_r>
 8005a84:	3001      	adds	r0, #1
 8005a86:	f000 80a9 	beq.w	8005bdc <_vfiprintf_r+0x1f0>
 8005a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a8c:	445a      	add	r2, fp
 8005a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a90:	f89a 3000 	ldrb.w	r3, [sl]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80a1 	beq.w	8005bdc <_vfiprintf_r+0x1f0>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa4:	f10a 0a01 	add.w	sl, sl, #1
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab2:	4654      	mov	r4, sl
 8005ab4:	2205      	movs	r2, #5
 8005ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aba:	4854      	ldr	r0, [pc, #336]	; (8005c0c <_vfiprintf_r+0x220>)
 8005abc:	f7fa fb90 	bl	80001e0 <memchr>
 8005ac0:	9a04      	ldr	r2, [sp, #16]
 8005ac2:	b9d8      	cbnz	r0, 8005afc <_vfiprintf_r+0x110>
 8005ac4:	06d1      	lsls	r1, r2, #27
 8005ac6:	bf44      	itt	mi
 8005ac8:	2320      	movmi	r3, #32
 8005aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ace:	0713      	lsls	r3, r2, #28
 8005ad0:	bf44      	itt	mi
 8005ad2:	232b      	movmi	r3, #43	; 0x2b
 8005ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8005adc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ade:	d015      	beq.n	8005b0c <_vfiprintf_r+0x120>
 8005ae0:	9a07      	ldr	r2, [sp, #28]
 8005ae2:	4654      	mov	r4, sl
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f04f 0c0a 	mov.w	ip, #10
 8005aea:	4621      	mov	r1, r4
 8005aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005af0:	3b30      	subs	r3, #48	; 0x30
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d94d      	bls.n	8005b92 <_vfiprintf_r+0x1a6>
 8005af6:	b1b0      	cbz	r0, 8005b26 <_vfiprintf_r+0x13a>
 8005af8:	9207      	str	r2, [sp, #28]
 8005afa:	e014      	b.n	8005b26 <_vfiprintf_r+0x13a>
 8005afc:	eba0 0308 	sub.w	r3, r0, r8
 8005b00:	fa09 f303 	lsl.w	r3, r9, r3
 8005b04:	4313      	orrs	r3, r2
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	46a2      	mov	sl, r4
 8005b0a:	e7d2      	b.n	8005ab2 <_vfiprintf_r+0xc6>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	1d19      	adds	r1, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	9103      	str	r1, [sp, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bfbb      	ittet	lt
 8005b18:	425b      	neglt	r3, r3
 8005b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b1e:	9307      	strge	r3, [sp, #28]
 8005b20:	9307      	strlt	r3, [sp, #28]
 8005b22:	bfb8      	it	lt
 8005b24:	9204      	strlt	r2, [sp, #16]
 8005b26:	7823      	ldrb	r3, [r4, #0]
 8005b28:	2b2e      	cmp	r3, #46	; 0x2e
 8005b2a:	d10c      	bne.n	8005b46 <_vfiprintf_r+0x15a>
 8005b2c:	7863      	ldrb	r3, [r4, #1]
 8005b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b30:	d134      	bne.n	8005b9c <_vfiprintf_r+0x1b0>
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	1d1a      	adds	r2, r3, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	9203      	str	r2, [sp, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b42:	3402      	adds	r4, #2
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c1c <_vfiprintf_r+0x230>
 8005b4a:	7821      	ldrb	r1, [r4, #0]
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	4650      	mov	r0, sl
 8005b50:	f7fa fb46 	bl	80001e0 <memchr>
 8005b54:	b138      	cbz	r0, 8005b66 <_vfiprintf_r+0x17a>
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	eba0 000a 	sub.w	r0, r0, sl
 8005b5c:	2240      	movs	r2, #64	; 0x40
 8005b5e:	4082      	lsls	r2, r0
 8005b60:	4313      	orrs	r3, r2
 8005b62:	3401      	adds	r4, #1
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b6a:	4829      	ldr	r0, [pc, #164]	; (8005c10 <_vfiprintf_r+0x224>)
 8005b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b70:	2206      	movs	r2, #6
 8005b72:	f7fa fb35 	bl	80001e0 <memchr>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d03f      	beq.n	8005bfa <_vfiprintf_r+0x20e>
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <_vfiprintf_r+0x228>)
 8005b7c:	bb1b      	cbnz	r3, 8005bc6 <_vfiprintf_r+0x1da>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	3307      	adds	r3, #7
 8005b82:	f023 0307 	bic.w	r3, r3, #7
 8005b86:	3308      	adds	r3, #8
 8005b88:	9303      	str	r3, [sp, #12]
 8005b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8c:	443b      	add	r3, r7
 8005b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b90:	e768      	b.n	8005a64 <_vfiprintf_r+0x78>
 8005b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b96:	460c      	mov	r4, r1
 8005b98:	2001      	movs	r0, #1
 8005b9a:	e7a6      	b.n	8005aea <_vfiprintf_r+0xfe>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	3401      	adds	r4, #1
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f04f 0c0a 	mov.w	ip, #10
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bae:	3a30      	subs	r2, #48	; 0x30
 8005bb0:	2a09      	cmp	r2, #9
 8005bb2:	d903      	bls.n	8005bbc <_vfiprintf_r+0x1d0>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0c6      	beq.n	8005b46 <_vfiprintf_r+0x15a>
 8005bb8:	9105      	str	r1, [sp, #20]
 8005bba:	e7c4      	b.n	8005b46 <_vfiprintf_r+0x15a>
 8005bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e7f0      	b.n	8005ba8 <_vfiprintf_r+0x1bc>
 8005bc6:	ab03      	add	r3, sp, #12
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	462a      	mov	r2, r5
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <_vfiprintf_r+0x22c>)
 8005bce:	a904      	add	r1, sp, #16
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f3af 8000 	nop.w
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	1c78      	adds	r0, r7, #1
 8005bda:	d1d6      	bne.n	8005b8a <_vfiprintf_r+0x19e>
 8005bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bde:	07d9      	lsls	r1, r3, #31
 8005be0:	d405      	bmi.n	8005bee <_vfiprintf_r+0x202>
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	059a      	lsls	r2, r3, #22
 8005be6:	d402      	bmi.n	8005bee <_vfiprintf_r+0x202>
 8005be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bea:	f7ff fa63 	bl	80050b4 <__retarget_lock_release_recursive>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	065b      	lsls	r3, r3, #25
 8005bf2:	f53f af1d 	bmi.w	8005a30 <_vfiprintf_r+0x44>
 8005bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bf8:	e71c      	b.n	8005a34 <_vfiprintf_r+0x48>
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <_vfiprintf_r+0x22c>)
 8005c02:	a904      	add	r1, sp, #16
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff fc87 	bl	8005518 <_printf_i>
 8005c0a:	e7e4      	b.n	8005bd6 <_vfiprintf_r+0x1ea>
 8005c0c:	08006677 	.word	0x08006677
 8005c10:	08006681 	.word	0x08006681
 8005c14:	00000000 	.word	0x00000000
 8005c18:	080059c7 	.word	0x080059c7
 8005c1c:	0800667d 	.word	0x0800667d

08005c20 <__swbuf_r>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	460e      	mov	r6, r1
 8005c24:	4614      	mov	r4, r2
 8005c26:	4605      	mov	r5, r0
 8005c28:	b118      	cbz	r0, 8005c32 <__swbuf_r+0x12>
 8005c2a:	6a03      	ldr	r3, [r0, #32]
 8005c2c:	b90b      	cbnz	r3, 8005c32 <__swbuf_r+0x12>
 8005c2e:	f7ff f91d 	bl	8004e6c <__sinit>
 8005c32:	69a3      	ldr	r3, [r4, #24]
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	071a      	lsls	r2, r3, #28
 8005c3a:	d525      	bpl.n	8005c88 <__swbuf_r+0x68>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	b31b      	cbz	r3, 8005c88 <__swbuf_r+0x68>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	6922      	ldr	r2, [r4, #16]
 8005c44:	1a98      	subs	r0, r3, r2
 8005c46:	6963      	ldr	r3, [r4, #20]
 8005c48:	b2f6      	uxtb	r6, r6
 8005c4a:	4283      	cmp	r3, r0
 8005c4c:	4637      	mov	r7, r6
 8005c4e:	dc04      	bgt.n	8005c5a <__swbuf_r+0x3a>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff fe08 	bl	8005868 <_fflush_r>
 8005c58:	b9e0      	cbnz	r0, 8005c94 <__swbuf_r+0x74>
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	6022      	str	r2, [r4, #0]
 8005c66:	701e      	strb	r6, [r3, #0]
 8005c68:	6962      	ldr	r2, [r4, #20]
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d004      	beq.n	8005c7a <__swbuf_r+0x5a>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	07db      	lsls	r3, r3, #31
 8005c74:	d506      	bpl.n	8005c84 <__swbuf_r+0x64>
 8005c76:	2e0a      	cmp	r6, #10
 8005c78:	d104      	bne.n	8005c84 <__swbuf_r+0x64>
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff fdf3 	bl	8005868 <_fflush_r>
 8005c82:	b938      	cbnz	r0, 8005c94 <__swbuf_r+0x74>
 8005c84:	4638      	mov	r0, r7
 8005c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 f806 	bl	8005c9c <__swsetup_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0d5      	beq.n	8005c40 <__swbuf_r+0x20>
 8005c94:	f04f 37ff 	mov.w	r7, #4294967295
 8005c98:	e7f4      	b.n	8005c84 <__swbuf_r+0x64>
	...

08005c9c <__swsetup_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <__swsetup_r+0xac>)
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	b118      	cbz	r0, 8005cb0 <__swsetup_r+0x14>
 8005ca8:	6a03      	ldr	r3, [r0, #32]
 8005caa:	b90b      	cbnz	r3, 8005cb0 <__swsetup_r+0x14>
 8005cac:	f7ff f8de 	bl	8004e6c <__sinit>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cb6:	0718      	lsls	r0, r3, #28
 8005cb8:	d422      	bmi.n	8005d00 <__swsetup_r+0x64>
 8005cba:	06d9      	lsls	r1, r3, #27
 8005cbc:	d407      	bmi.n	8005cce <__swsetup_r+0x32>
 8005cbe:	2309      	movs	r3, #9
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cc6:	81a3      	strh	r3, [r4, #12]
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	e034      	b.n	8005d38 <__swsetup_r+0x9c>
 8005cce:	0758      	lsls	r0, r3, #29
 8005cd0:	d512      	bpl.n	8005cf8 <__swsetup_r+0x5c>
 8005cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd4:	b141      	cbz	r1, 8005ce8 <__swsetup_r+0x4c>
 8005cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	d002      	beq.n	8005ce4 <__swsetup_r+0x48>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7ff fa08 	bl	80050f4 <_free_r>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6063      	str	r3, [r4, #4]
 8005cf4:	6923      	ldr	r3, [r4, #16]
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f043 0308 	orr.w	r3, r3, #8
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	b94b      	cbnz	r3, 8005d18 <__swsetup_r+0x7c>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0e:	d003      	beq.n	8005d18 <__swsetup_r+0x7c>
 8005d10:	4621      	mov	r1, r4
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 f88c 	bl	8005e30 <__smakebuf_r>
 8005d18:	89a0      	ldrh	r0, [r4, #12]
 8005d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1e:	f010 0301 	ands.w	r3, r0, #1
 8005d22:	d00a      	beq.n	8005d3a <__swsetup_r+0x9e>
 8005d24:	2300      	movs	r3, #0
 8005d26:	60a3      	str	r3, [r4, #8]
 8005d28:	6963      	ldr	r3, [r4, #20]
 8005d2a:	425b      	negs	r3, r3
 8005d2c:	61a3      	str	r3, [r4, #24]
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	b943      	cbnz	r3, 8005d44 <__swsetup_r+0xa8>
 8005d32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d36:	d1c4      	bne.n	8005cc2 <__swsetup_r+0x26>
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	0781      	lsls	r1, r0, #30
 8005d3c:	bf58      	it	pl
 8005d3e:	6963      	ldrpl	r3, [r4, #20]
 8005d40:	60a3      	str	r3, [r4, #8]
 8005d42:	e7f4      	b.n	8005d2e <__swsetup_r+0x92>
 8005d44:	2000      	movs	r0, #0
 8005d46:	e7f7      	b.n	8005d38 <__swsetup_r+0x9c>
 8005d48:	20000278 	.word	0x20000278

08005d4c <_raise_r>:
 8005d4c:	291f      	cmp	r1, #31
 8005d4e:	b538      	push	{r3, r4, r5, lr}
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	d904      	bls.n	8005d60 <_raise_r+0x14>
 8005d56:	2316      	movs	r3, #22
 8005d58:	6003      	str	r3, [r0, #0]
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d62:	b112      	cbz	r2, 8005d6a <_raise_r+0x1e>
 8005d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d68:	b94b      	cbnz	r3, 8005d7e <_raise_r+0x32>
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 f830 	bl	8005dd0 <_getpid_r>
 8005d70:	462a      	mov	r2, r5
 8005d72:	4601      	mov	r1, r0
 8005d74:	4620      	mov	r0, r4
 8005d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d7a:	f000 b817 	b.w	8005dac <_kill_r>
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d00a      	beq.n	8005d98 <_raise_r+0x4c>
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	d103      	bne.n	8005d8e <_raise_r+0x42>
 8005d86:	2316      	movs	r3, #22
 8005d88:	6003      	str	r3, [r0, #0]
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	e7e7      	b.n	8005d5e <_raise_r+0x12>
 8005d8e:	2400      	movs	r4, #0
 8005d90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d94:	4628      	mov	r0, r5
 8005d96:	4798      	blx	r3
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7e0      	b.n	8005d5e <_raise_r+0x12>

08005d9c <raise>:
 8005d9c:	4b02      	ldr	r3, [pc, #8]	; (8005da8 <raise+0xc>)
 8005d9e:	4601      	mov	r1, r0
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f7ff bfd3 	b.w	8005d4c <_raise_r>
 8005da6:	bf00      	nop
 8005da8:	20000278 	.word	0x20000278

08005dac <_kill_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d07      	ldr	r5, [pc, #28]	; (8005dcc <_kill_r+0x20>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	f7fc fa2f 	bl	800221c <_kill>
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	d102      	bne.n	8005dc8 <_kill_r+0x1c>
 8005dc2:	682b      	ldr	r3, [r5, #0]
 8005dc4:	b103      	cbz	r3, 8005dc8 <_kill_r+0x1c>
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	bd38      	pop	{r3, r4, r5, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000528 	.word	0x20000528

08005dd0 <_getpid_r>:
 8005dd0:	f7fc ba1c 	b.w	800220c <_getpid>

08005dd4 <_malloc_usable_size_r>:
 8005dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd8:	1f18      	subs	r0, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bfbc      	itt	lt
 8005dde:	580b      	ldrlt	r3, [r1, r0]
 8005de0:	18c0      	addlt	r0, r0, r3
 8005de2:	4770      	bx	lr

08005de4 <__swhatbuf_r>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	2900      	cmp	r1, #0
 8005dee:	b096      	sub	sp, #88	; 0x58
 8005df0:	4615      	mov	r5, r2
 8005df2:	461e      	mov	r6, r3
 8005df4:	da0d      	bge.n	8005e12 <__swhatbuf_r+0x2e>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dfc:	f04f 0100 	mov.w	r1, #0
 8005e00:	bf0c      	ite	eq
 8005e02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e06:	2340      	movne	r3, #64	; 0x40
 8005e08:	2000      	movs	r0, #0
 8005e0a:	6031      	str	r1, [r6, #0]
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	b016      	add	sp, #88	; 0x58
 8005e10:	bd70      	pop	{r4, r5, r6, pc}
 8005e12:	466a      	mov	r2, sp
 8005e14:	f000 f848 	bl	8005ea8 <_fstat_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	dbec      	blt.n	8005df6 <__swhatbuf_r+0x12>
 8005e1c:	9901      	ldr	r1, [sp, #4]
 8005e1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e26:	4259      	negs	r1, r3
 8005e28:	4159      	adcs	r1, r3
 8005e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2e:	e7eb      	b.n	8005e08 <__swhatbuf_r+0x24>

08005e30 <__smakebuf_r>:
 8005e30:	898b      	ldrh	r3, [r1, #12]
 8005e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e34:	079d      	lsls	r5, r3, #30
 8005e36:	4606      	mov	r6, r0
 8005e38:	460c      	mov	r4, r1
 8005e3a:	d507      	bpl.n	8005e4c <__smakebuf_r+0x1c>
 8005e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	6123      	str	r3, [r4, #16]
 8005e44:	2301      	movs	r3, #1
 8005e46:	6163      	str	r3, [r4, #20]
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	ab01      	add	r3, sp, #4
 8005e4e:	466a      	mov	r2, sp
 8005e50:	f7ff ffc8 	bl	8005de4 <__swhatbuf_r>
 8005e54:	9900      	ldr	r1, [sp, #0]
 8005e56:	4605      	mov	r5, r0
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f7fe feb1 	bl	8004bc0 <_malloc_r>
 8005e5e:	b948      	cbnz	r0, 8005e74 <__smakebuf_r+0x44>
 8005e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e64:	059a      	lsls	r2, r3, #22
 8005e66:	d4ef      	bmi.n	8005e48 <__smakebuf_r+0x18>
 8005e68:	f023 0303 	bic.w	r3, r3, #3
 8005e6c:	f043 0302 	orr.w	r3, r3, #2
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	e7e3      	b.n	8005e3c <__smakebuf_r+0xc>
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	6020      	str	r0, [r4, #0]
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	6163      	str	r3, [r4, #20]
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	6120      	str	r0, [r4, #16]
 8005e86:	b15b      	cbz	r3, 8005ea0 <__smakebuf_r+0x70>
 8005e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f000 f81d 	bl	8005ecc <_isatty_r>
 8005e92:	b128      	cbz	r0, 8005ea0 <__smakebuf_r+0x70>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	431d      	orrs	r5, r3
 8005ea4:	81a5      	strh	r5, [r4, #12]
 8005ea6:	e7cf      	b.n	8005e48 <__smakebuf_r+0x18>

08005ea8 <_fstat_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4d07      	ldr	r5, [pc, #28]	; (8005ec8 <_fstat_r+0x20>)
 8005eac:	2300      	movs	r3, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	f7fc fa10 	bl	80022da <_fstat>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d102      	bne.n	8005ec4 <_fstat_r+0x1c>
 8005ebe:	682b      	ldr	r3, [r5, #0]
 8005ec0:	b103      	cbz	r3, 8005ec4 <_fstat_r+0x1c>
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	bd38      	pop	{r3, r4, r5, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000528 	.word	0x20000528

08005ecc <_isatty_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d06      	ldr	r5, [pc, #24]	; (8005ee8 <_isatty_r+0x1c>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fc fa0f 	bl	80022fa <_isatty>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_isatty_r+0x1a>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_isatty_r+0x1a>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	20000528 	.word	0x20000528

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
